%!PS-Adobe-3.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - RSAEFIN.DOC
%%BoundingBox: 18 23 577 819
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: (atend)
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#88/circumflex 16#89/perthousand
16#8A/Scaron 16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright
16#93/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#98/tilde 16#99/trademark 16#9A/scaron 16#9B/guilsinglright
16#9C/oe 16#9F/Ydieresis 16#A0/space 16#A1/exclamdown 16#A4/currency
16#A5/yen 16#A6/brokenbar 16#A7/section 16#A8/dieresis 16#A9/copyright
16#AA/ordfeminine 16#AB/guillemotleft 16#AC/logicalnot 16#AD/hyphen
16#AE/registered 16#AF/macron 16#B0/degree 16#B1/plusminus 16#B2/twosuperior
16#B3/threesuperior 16#B4/acute 16#B5/mu 16#B6/paragraph 16#B7/periodcentered
16#B8/cedilla 16#B9/onesuperior 16#BA/ordmasculine 16#BB/guillemotright
16#BC/onequarter 16#BD/onehalf 16#BE/threequarters 16#BF/questiondown
16#C0/Agrave 16#C1/Aacute 16#C2/Acircumflex 16#C3/Atilde 16#C4/Adieresis
16#C5/Aring 16#C6/AE 16#C7/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA
/Ecircumflex 16#CB/Edieresis 16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex
16#CF/Idieresis 16#D0/Eth 16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4
/Ocircumflex 16#D5/Otilde 16#D6/Odieresis 16#D7/multiply 16#D8/Oslash
16#D9/Ugrave 16#DA/Uacute 16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute
16#DE/Thorn 16#DF/germandbls 16#E0/agrave 16#E1/aacute 16#E2/acircumflex
16#E3/atilde 16#E4/adieresis 16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8
/egrave 16#E9/eacute 16#EA/ecircumflex 16#EB/edieresis 16#EC/igrave
16#ED/iacute 16#EE/icircumflex 16#EF/idieresis 16#F0/eth 16#F1/ntilde
16#F2/ograve 16#F3/oacute 16#F4/ocircumflex 16#F5/otilde 16#F6/odieresis
16#F7/divide 16#F8/oslash 16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex
16#FC/udieresis 16#FD/yacute 16#FE/thorn 16#FF/ydieresis ] def/reencdict
12 dict def/IsChar{basefontdict/CharStrings get exch known}bd/MapCh{dup
IsChar not{pop/bullet}if newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0
/degree IsChar{/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar
IsChar{/brokenbar}{/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname
ed/basefontname ed FontDirectory newfontname known not{/basefontdict
basefontname findfont def/newfont basefontdict maxlength dict def basefontdict{exch
dup/FID ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll
put}{exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont
/FontName newfontname put 127 1 159{newfont/Encoding get exch/bullet
put}for ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree
MapBB newfontname newfont definefont pop}if newfontname end}bd/SB{FC
/ULlen ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed
/dxGdi ed/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1
mul x1 x1 mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch
y1 mul cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra
ed/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
ErrHandler
statusdict begin 0 setjobtimeout end
statusdict begin statusdict /jobname (Microsoft Word - RSAEFIN.DOC) put end
/oldDictCnt countdictstack def {}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
/oldDictCnt countdictstack def {a4
}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
[
{mark 1.0 1.0 .98 .9 .82 .68 .56 .48 .28 .1 .06 .0 counttomark dup 3 add -1 roll exch 2 sub mul dup floor cvi dup 3 1 roll sub exch dup  3 add index exch 2 add index dup 4 1 roll sub mul add counttomark 1 add 1 roll  cleartomark } bind
/exec load currenttransfer /exec load] cvx settransfer
%%EndSetup
%%Page: 1 1
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 150 150 0 0 0 143 /Palatino-BoldItalic /font25 ANSIFont font
0 0 0 fC
gs 2085 555 123 1383 CB
795 1383 741 (RSAEURO) 741 SB
gr
gs 2085 555 123 1383 CB
761 1753 809 (Version 1.00) 809 SB
gr
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Palatino-BoldItalic
%%Page: 2 2
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 143 530 (Table of contents) 530 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 301 356 (INTRODUCTION) 356 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
517 301 352 (................................) 352 SB
869 301 352 (................................) 352 SB
1221 301 352 (................................) 352 SB
1573 301 352 (................................) 352 SB
1925 301 99 (.........) 99 SB
2030 301 21 (2) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 363 375 (What is RSAEURO?) 375 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
583 363 352 (................................) 352 SB
935 363 352 (................................) 352 SB
1287 363 352 (................................) 352 SB
1639 363 352 (................................) 352 SB
1991 363 33 (...) 33 SB
2030 363 21 (2) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 424 656 (What is covered by this document?) 656 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
869 424 352 (................................) 352 SB
1221 424 352 (................................) 352 SB
1573 424 352 (................................) 352 SB
1925 424 99 (.........) 99 SB
2030 424 21 (2) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 485 474 (Typographic conventions) 474 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
682 485 352 (................................) 352 SB
1034 485 352 (................................) 352 SB
1386 485 352 (................................) 352 SB
1738 485 286 (..........................) 286 SB
2030 485 21 (3) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 546 140 (Licence) 140 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
352 546 352 (................................) 352 SB
704 546 352 (................................) 352 SB
1056 546 352 (................................) 352 SB
1408 546 352 (................................) 352 SB
1760 546 264 (........................) 264 SB
2030 546 21 (3) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 607 443 (Patents and trademarks) 443 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
660 607 352 (................................) 352 SB
1012 607 352 (................................) 352 SB
1364 607 352 (................................) 352 SB
1716 607 308 (............................) 308 SB
2030 607 21 (5) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 658 367 (Public Key Partners) 367 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
627 658 352 (................................) 352 SB
979 658 352 (................................) 352 SB
1331 658 352 (................................) 352 SB
1683 658 341 (...............................) 341 SB
2030 658 21 (5) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 709 152 (RSADSI) 152 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
418 709 352 (................................) 352 SB
770 709 352 (................................) 352 SB
1122 709 352 (................................) 352 SB
1474 709 352 (................................) 352 SB
1826 709 198 (..................) 198 SB
2030 709 21 (5) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 760 264 (Miscellaneous) 264 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
528 760 352 (................................) 352 SB
880 760 352 (................................) 352 SB
1232 760 352 (................................) 352 SB
1584 760 352 (................................) 352 SB
1936 760 88 (........) 88 SB
2030 760 21 (5) 21 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 886 441 (RANDOM NUMBERS) 441 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
605 886 352 (................................) 352 SB
957 886 352 (................................) 352 SB
1309 886 352 (................................) 352 SB
1661 886 352 (................................) 352 SB
2013 886 11 (.) 11 SB
2030 886 21 (6) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 948 235 (Introduction) 235 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
451 948 352 (................................) 352 SB
803 948 352 (................................) 352 SB
1155 948 352 (................................) 352 SB
1507 948 352 (................................) 352 SB
1859 948 165 (...............) 165 SB
2030 948 21 (6) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 1009 403 (Function descriptions) 403 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
616 1009 352 (................................) 352 SB
968 1009 352 (................................) 352 SB
1320 1009 352 (................................) 352 SB
1672 1009 352 (................................) 352 SB
2030 1009 21 (6) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1060 272 (R_RandomInit) 272 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
528 1060 352 (................................) 352 SB
880 1060 352 (................................) 352 SB
1232 1060 352 (................................) 352 SB
1584 1060 352 (................................) 352 SB
1936 1060 88 (........) 88 SB
2030 1060 21 (6) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1111 347 (R_RandomUpdate) 347 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
605 1111 352 (................................) 352 SB
957 1111 352 (................................) 352 SB
1309 1111 352 (................................) 352 SB
1661 1111 352 (................................) 352 SB
2013 1111 11 (.) 11 SB
2030 1111 21 (7) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1162 522 (R_GetRandomBytesNeeded) 522 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
781 1162 352 (................................) 352 SB
1133 1162 352 (................................) 352 SB
1485 1162 352 (................................) 352 SB
1837 1162 187 (.................) 187 SB
2030 1162 21 (7) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1213 318 (R_GenerateBytes) 318 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
583 1213 352 (................................) 352 SB
935 1213 352 (................................) 352 SB
1287 1213 352 (................................) 352 SB
1639 1213 352 (................................) 352 SB
1991 1213 33 (...) 33 SB
2030 1213 21 (7) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1264 300 (R_RandomFinal) 300 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
561 1264 352 (................................) 352 SB
913 1264 352 (................................) 352 SB
1265 1264 352 (................................) 352 SB
1617 1264 352 (................................) 352 SB
1969 1264 55 (.....) 55 SB
2030 1264 21 (7) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1315 330 (R_RandomCreate) 330 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
594 1315 352 (................................) 352 SB
946 1315 352 (................................) 352 SB
1298 1315 352 (................................) 352 SB
1650 1315 352 (................................) 352 SB
2002 1315 22 (..) 22 SB
2030 1315 21 (7) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1366 282 (R_RandomMix) 282 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
539 1366 352 (................................) 352 SB
891 1366 352 (................................) 352 SB
1243 1366 352 (................................) 352 SB
1595 1366 352 (................................) 352 SB
1947 1366 77 (.......) 77 SB
2030 1366 21 (7) 21 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 1492 417 (MESSAGE DIGESTS) 417 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
583 1492 352 (................................) 352 SB
935 1492 352 (................................) 352 SB
1287 1492 352 (................................) 352 SB
1639 1492 352 (................................) 352 SB
1991 1492 33 (...) 33 SB
2030 1492 21 (8) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 1554 235 (Introduction) 235 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
451 1554 352 (................................) 352 SB
803 1554 352 (................................) 352 SB
1155 1554 352 (................................) 352 SB
1507 1554 352 (................................) 352 SB
1859 1554 165 (...............) 165 SB
2030 1554 21 (8) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 1615 182 (Functions) 182 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
396 1615 352 (................................) 352 SB
748 1615 352 (................................) 352 SB
1100 1615 352 (................................) 352 SB
1452 1615 352 (................................) 352 SB
1804 1615 220 (....................) 220 SB
2030 1615 21 (8) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1666 233 (R_DigestInit) 233 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
495 1666 352 (................................) 352 SB
847 1666 352 (................................) 352 SB
1199 1666 352 (................................) 352 SB
1551 1666 352 (................................) 352 SB
1903 1666 121 (...........) 121 SB
2030 1666 21 (8) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1717 308 (R_DigestUpdate) 308 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
572 1717 352 (................................) 352 SB
924 1717 352 (................................) 352 SB
1276 1717 352 (................................) 352 SB
1628 1717 352 (................................) 352 SB
1980 1717 44 (....) 44 SB
2030 1717 21 (8) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1768 261 (R_DigestFinal) 261 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
517 1768 352 (................................) 352 SB
869 1768 352 (................................) 352 SB
1221 1768 352 (................................) 352 SB
1573 1768 352 (................................) 352 SB
1925 1768 99 (.........) 99 SB
2030 1768 21 (9) 21 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1819 272 (R_DigestBlock) 272 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
528 1819 352 (................................) 352 SB
880 1819 352 (................................) 352 SB
1232 1819 352 (................................) 352 SB
1584 1819 352 (................................) 352 SB
1936 1819 88 (........) 88 SB
2030 1819 21 (9) 21 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 1945 702 (DIGITAL SIGNATURE ROUTINES) 702 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
869 1945 352 (................................) 352 SB
1221 1945 352 (................................) 352 SB
1573 1945 352 (................................) 352 SB
1925 1945 77 (.......) 77 SB
2009 1945 42 (10) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 2007 235 (Introduction) 235 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
451 2007 352 (................................) 352 SB
803 2007 352 (................................) 352 SB
1155 2007 352 (................................) 352 SB
1507 2007 352 (................................) 352 SB
1859 2007 143 (.............) 143 SB
2009 2007 42 (10) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 2068 182 (Functions) 182 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
396 2068 352 (................................) 352 SB
748 2068 352 (................................) 352 SB
1100 2068 352 (................................) 352 SB
1452 2068 352 (................................) 352 SB
1804 2068 198 (..................) 198 SB
2009 2068 42 (11) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2119 194 (R_SignInit) 194 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
451 2119 352 (................................) 352 SB
803 2119 352 (................................) 352 SB
1155 2119 352 (................................) 352 SB
1507 2119 352 (................................) 352 SB
1859 2119 143 (.............) 143 SB
2009 2119 42 (11) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2170 269 (R_SignUpdate) 269 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
528 2170 352 (................................) 352 SB
880 2170 352 (................................) 352 SB
1232 2170 352 (................................) 352 SB
1584 2170 352 (................................) 352 SB
1936 2170 66 (......) 66 SB
2009 2170 42 (11) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2221 222 (R_SignFinal) 222 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
484 2221 352 (................................) 352 SB
836 2221 352 (................................) 352 SB
1188 2221 352 (................................) 352 SB
1540 2221 352 (................................) 352 SB
1892 2221 110 (..........) 110 SB
2009 2221 42 (11) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2272 233 (R_SignBlock) 233 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
495 2272 352 (................................) 352 SB
847 2272 352 (................................) 352 SB
1199 2272 352 (................................) 352 SB
1551 2272 352 (................................) 352 SB
1903 2272 99 (.........) 99 SB
2009 2272 42 (11) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2323 229 (R_VerifyInit) 229 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
495 2323 352 (................................) 352 SB
847 2323 352 (................................) 352 SB
1199 2323 352 (................................) 352 SB
1551 2323 352 (................................) 352 SB
1903 2323 99 (.........) 99 SB
2009 2323 42 (12) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2374 304 (R_VerifyUpdate) 304 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
561 2374 352 (................................) 352 SB
913 2374 352 (................................) 352 SB
1265 2374 352 (................................) 352 SB
1617 2374 352 (................................) 352 SB
1969 2374 33 (...) 33 SB
2009 2374 42 (13) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2425 257 (R_VerifyFinal) 257 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
517 2425 352 (................................) 352 SB
869 2425 352 (................................) 352 SB
1221 2425 352 (................................) 352 SB
1573 2425 352 (................................) 352 SB
1925 2425 77 (.......) 77 SB
2009 2425 42 (13) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2476 446 (R_VerifyBlockSignature) 446 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
704 2476 352 (................................) 352 SB
1056 2476 352 (................................) 352 SB
1408 2476 352 (................................) 352 SB
1760 2476 242 (......................) 242 SB
2009 2476 42 (13) 42 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 2602 529 (ENVELOPE PROCESSING) 529 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
693 2602 352 (................................) 352 SB
1045 2602 352 (................................) 352 SB
1397 2602 352 (................................) 352 SB
1749 2602 253 (.......................) 253 SB
2009 2602 42 (14) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 2664 235 (Introduction) 235 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
451 2664 352 (................................) 352 SB
803 2664 352 (................................) 352 SB
1155 2664 352 (................................) 352 SB
1507 2664 352 (................................) 352 SB
1859 2664 143 (.............) 143 SB
2009 2664 42 (14) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 2725 602 (Sealing data in digital envelopes) 602 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
814 2725 352 (................................) 352 SB
1166 2725 352 (................................) 352 SB
1518 2725 352 (................................) 352 SB
1870 2725 132 (............) 132 SB
2009 2725 42 (14) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 2786 489 (Opening digital envelopes) 489 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
704 2786 352 (................................) 352 SB
1056 2786 352 (................................) 352 SB
1408 2786 352 (................................) 352 SB
1760 2786 242 (......................) 242 SB
2009 2786 42 (14) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 2847 182 (Functions) 182 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
396 2847 352 (................................) 352 SB
748 2847 352 (................................) 352 SB
1100 2847 352 (................................) 352 SB
1452 2847 352 (................................) 352 SB
1804 2847 198 (..................) 198 SB
2009 2847 42 (15) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2898 188 (R_SealInit) 188 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
451 2898 352 (................................) 352 SB
803 2898 352 (................................) 352 SB
1155 2898 352 (................................) 352 SB
1507 2898 352 (................................) 352 SB
1859 2898 143 (.............) 143 SB
2009 2898 42 (15) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2949 263 (R_SealUpdate) 263 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
528 2949 352 (................................) 352 SB
880 2949 352 (................................) 352 SB
1232 2949 352 (................................) 352 SB
1584 2949 352 (................................) 352 SB
1936 2949 66 (......) 66 SB
2009 2949 42 (15) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 3000 216 (R_SealFinal) 216 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
473 3000 352 (................................) 352 SB
825 3000 352 (................................) 352 SB
1177 3000 352 (................................) 352 SB
1529 3000 352 (................................) 352 SB
1881 3000 121 (...........) 121 SB
2009 3000 42 (16) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 3051 215 (R_OpenInit) 215 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
473 3051 352 (................................) 352 SB
825 3051 352 (................................) 352 SB
1177 3051 352 (................................) 352 SB
1529 3051 352 (................................) 352 SB
1881 3051 121 (...........) 121 SB
2009 3051 42 (16) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 3102 290 (R_OpenUpdate) 290 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
550 3102 352 (................................) 352 SB
902 3102 352 (................................) 352 SB
1254 3102 352 (................................) 352 SB
1606 3102 352 (................................) 352 SB
1958 3102 44 (....) 44 SB
2009 3102 42 (16) 42 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1095 3214 21 (1) 21 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 3 3
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
0 0 0 fC
256 143 243 (R_OpenFinal) 243 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
506 143 352 (................................) 352 SB
858 143 352 (................................) 352 SB
1210 143 352 (................................) 352 SB
1562 143 352 (................................) 352 SB
1914 143 88 (........) 88 SB
2009 143 42 (17) 42 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 269 366 (PEM FUNCTIONS) 366 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
528 269 352 (................................) 352 SB
880 269 352 (................................) 352 SB
1232 269 352 (................................) 352 SB
1584 269 352 (................................) 352 SB
1936 269 66 (......) 66 SB
2009 269 42 (18) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 331 235 (Introduction) 235 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
451 331 352 (................................) 352 SB
803 331 352 (................................) 352 SB
1155 331 352 (................................) 352 SB
1507 331 352 (................................) 352 SB
1859 331 143 (.............) 143 SB
2009 331 42 (18) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 392 182 (Functions) 182 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
396 392 352 (................................) 352 SB
748 392 352 (................................) 352 SB
1100 392 352 (................................) 352 SB
1452 392 352 (................................) 352 SB
1804 392 198 (..................) 198 SB
2009 392 42 (18) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 443 381 (R_EncodePEMBlock) 381 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
638 443 352 (................................) 352 SB
990 443 352 (................................) 352 SB
1342 443 352 (................................) 352 SB
1694 443 308 (............................) 308 SB
2009 443 42 (18) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 494 384 (R_DecodePEMBlock) 384 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
649 494 352 (................................) 352 SB
1001 494 352 (................................) 352 SB
1353 494 352 (................................) 352 SB
1705 494 297 (...........................) 297 SB
2009 494 42 (19) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 545 324 (R_SignPEMBlock) 324 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
583 545 352 (................................) 352 SB
935 545 352 (................................) 352 SB
1287 545 352 (................................) 352 SB
1639 545 352 (................................) 352 SB
1991 545 11 (.) 11 SB
2009 545 42 (19) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 596 434 (R_VerifyPEMSignature) 434 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
693 596 352 (................................) 352 SB
1045 596 352 (................................) 352 SB
1397 596 352 (................................) 352 SB
1749 596 253 (.......................) 253 SB
2009 596 42 (19) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 647 318 (R_SealPEMBlock) 318 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
583 647 352 (................................) 352 SB
935 647 352 (................................) 352 SB
1287 647 352 (................................) 352 SB
1639 647 352 (................................) 352 SB
1991 647 11 (.) 11 SB
2009 647 42 (20) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 698 345 (R_OpenPEMBlock) 345 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
605 698 352 (................................) 352 SB
957 698 352 (................................) 352 SB
1309 698 352 (................................) 352 SB
1661 698 341 (...............................) 341 SB
2009 698 42 (21) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 749 493 (R_EncryptOpenPEMBlock) 493 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
759 749 352 (................................) 352 SB
1111 749 352 (................................) 352 SB
1463 749 352 (................................) 352 SB
1815 749 187 (.................) 187 SB
2009 749 42 (21) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 800 496 (R_DecryptOpenPEMBlock) 496 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
759 800 352 (................................) 352 SB
1111 800 352 (................................) 352 SB
1463 800 352 (................................) 352 SB
1815 800 187 (.................) 187 SB
2009 800 42 (21) 42 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 926 770 (KEY GENERATION AND EXCHANGE) 770 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
935 926 352 (................................) 352 SB
1287 926 352 (................................) 352 SB
1639 926 352 (................................) 352 SB
1991 926 11 (.) 11 SB
2009 926 42 (22) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 988 235 (Introduction) 235 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
451 988 352 (................................) 352 SB
803 988 352 (................................) 352 SB
1155 988 352 (................................) 352 SB
1507 988 352 (................................) 352 SB
1859 988 143 (.............) 143 SB
2009 988 42 (22) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 1049 385 (RSA Key Generation) 385 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
594 1049 352 (................................) 352 SB
946 1049 352 (................................) 352 SB
1298 1049 352 (................................) 352 SB
1650 1049 352 (................................) 352 SB
2009 1049 42 (22) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 1110 564 (Diffie-Hellman key agreement) 564 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
781 1110 352 (................................) 352 SB
1133 1110 352 (................................) 352 SB
1485 1110 352 (................................) 352 SB
1837 1110 165 (...............) 165 SB
2009 1110 42 (22) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 1171 182 (Functions) 182 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
396 1171 352 (................................) 352 SB
748 1171 352 (................................) 352 SB
1100 1171 352 (................................) 352 SB
1452 1171 352 (................................) 352 SB
1804 1171 198 (..................) 198 SB
2009 1171 42 (22) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1222 399 (R_GeneratePEMKeys) 399 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
660 1222 352 (................................) 352 SB
1012 1222 352 (................................) 352 SB
1364 1222 352 (................................) 352 SB
1716 1222 286 (..........................) 286 SB
2009 1222 42 (22) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1273 424 (R_GenerateDHParams) 424 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
682 1273 352 (................................) 352 SB
1034 1273 352 (................................) 352 SB
1386 1273 352 (................................) 352 SB
1738 1273 264 (........................) 264 SB
2009 1273 42 (23) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1324 431 (R_SetupDHAgreement) 431 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
693 1324 352 (................................) 352 SB
1045 1324 352 (................................) 352 SB
1397 1324 352 (................................) 352 SB
1749 1324 253 (.......................) 253 SB
2009 1324 42 (23) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1375 503 (R_ComputeDHAgreedKey) 503 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
759 1375 352 (................................) 352 SB
1111 1375 352 (................................) 352 SB
1463 1375 352 (................................) 352 SB
1815 1375 187 (.................) 187 SB
2009 1375 42 (23) 42 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 1501 572 (MEMORY MANIPULATION) 572 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
737 1501 352 (................................) 352 SB
1089 1501 352 (................................) 352 SB
1441 1501 352 (................................) 352 SB
1793 1501 209 (...................) 209 SB
2009 1501 42 (24) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 1563 235 (Introduction) 235 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
451 1563 352 (................................) 352 SB
803 1563 352 (................................) 352 SB
1155 1563 352 (................................) 352 SB
1507 1563 352 (................................) 352 SB
1859 1563 143 (.............) 143 SB
2009 1563 42 (24) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 1624 182 (Functions) 182 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
396 1624 352 (................................) 352 SB
748 1624 352 (................................) 352 SB
1100 1624 352 (................................) 352 SB
1452 1624 352 (................................) 352 SB
1804 1624 198 (..................) 198 SB
2009 1624 42 (24) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1675 195 (R_memset) 195 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
451 1675 352 (................................) 352 SB
803 1675 352 (................................) 352 SB
1155 1675 352 (................................) 352 SB
1507 1675 352 (................................) 352 SB
1859 1675 143 (.............) 143 SB
2009 1675 42 (24) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1726 210 (R_memcpy) 210 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
473 1726 352 (................................) 352 SB
825 1726 352 (................................) 352 SB
1177 1726 352 (................................) 352 SB
1529 1726 352 (................................) 352 SB
1881 1726 121 (...........) 121 SB
2009 1726 42 (24) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 1777 224 (R_memcmp) 224 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
484 1777 352 (................................) 352 SB
836 1777 352 (................................) 352 SB
1188 1777 352 (................................) 352 SB
1540 1777 352 (................................) 352 SB
1892 1777 110 (..........) 110 SB
2009 1777 42 (24) 42 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 1903 598 (TECHNICAL INFORMATION) 598 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
759 1903 352 (................................) 352 SB
1111 1903 352 (................................) 352 SB
1463 1903 352 (................................) 352 SB
1815 1903 187 (.................) 187 SB
2009 1903 42 (25) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 1965 235 (Introduction) 235 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
451 1965 352 (................................) 352 SB
803 1965 352 (................................) 352 SB
1155 1965 352 (................................) 352 SB
1507 1965 352 (................................) 352 SB
1859 1965 143 (.............) 143 SB
2009 1965 42 (25) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 2026 223 (Error Types) 223 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
440 2026 352 (................................) 352 SB
792 2026 352 (................................) 352 SB
1144 2026 352 (................................) 352 SB
1496 2026 352 (................................) 352 SB
1848 2026 154 (..............) 154 SB
2009 2026 42 (25) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 2087 426 (RSAEURO Data Types) 426 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
638 2087 352 (................................) 352 SB
990 2087 352 (................................) 352 SB
1342 2087 352 (................................) 352 SB
1694 2087 308 (............................) 308 SB
2009 2087 42 (26) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2138 437 (R_RANDOM_STRUCT) 437 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
693 2138 352 (................................) 352 SB
1045 2138 352 (................................) 352 SB
1397 2138 352 (................................) 352 SB
1749 2138 253 (.......................) 253 SB
2009 2138 42 (26) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2189 412 (R_RSA_PUBLIC_KEY) 412 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
671 2189 352 (................................) 352 SB
1023 2189 352 (................................) 352 SB
1375 2189 352 (................................) 352 SB
1727 2189 275 (.........................) 275 SB
2009 2189 42 (26) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2240 440 (R_RSA_PRIVATE_KEY) 440 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
704 2240 352 (................................) 352 SB
1056 2240 352 (................................) 352 SB
1408 2240 352 (................................) 352 SB
1760 2240 242 (......................) 242 SB
2009 2240 42 (26) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2291 403 (R_RSA_PROTO_KEY) 403 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
660 2291 352 (................................) 352 SB
1012 2291 352 (................................) 352 SB
1364 2291 352 (................................) 352 SB
1716 2291 286 (..........................) 286 SB
2009 2291 42 (27) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2342 319 (R_DH_PARAMS) 319 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
583 2342 352 (................................) 352 SB
935 2342 352 (................................) 352 SB
1287 2342 352 (................................) 352 SB
1639 2342 352 (................................) 352 SB
1991 2342 11 (.) 11 SB
2009 2342 42 (27) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2393 307 (R_DIGEST_CTX) 307 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
572 2393 352 (................................) 352 SB
924 2393 352 (................................) 352 SB
1276 2393 352 (................................) 352 SB
1628 2393 352 (................................) 352 SB
1980 2393 22 (..) 22 SB
2009 2393 42 (28) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2444 403 (R_SIGNATURE_CTX) 403 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
660 2444 352 (................................) 352 SB
1012 2444 352 (................................) 352 SB
1364 2444 352 (................................) 352 SB
1716 2444 286 (..........................) 286 SB
2009 2444 42 (28) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2495 381 (R_ENVELOPE_CTX) 381 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
638 2495 352 (................................) 352 SB
990 2495 352 (................................) 352 SB
1342 2495 352 (................................) 352 SB
1694 2495 308 (............................) 308 SB
2009 2495 42 (28) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 2556 589 (Platform-specific Configuration) 589 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
803 2556 352 (................................) 352 SB
1155 2556 352 (................................) 352 SB
1507 2556 352 (................................) 352 SB
1859 2556 143 (.............) 143 SB
2009 2556 42 (29) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2607 112 (Types) 112 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
374 2607 352 (................................) 352 SB
726 2607 352 (................................) 352 SB
1078 2607 352 (................................) 352 SB
1430 2607 352 (................................) 352 SB
1782 2607 220 (....................) 220 SB
2009 2607 42 (29) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2658 295 (Defined macros) 295 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
561 2658 352 (................................) 352 SB
913 2658 352 (................................) 352 SB
1265 2658 352 (................................) 352 SB
1617 2658 352 (................................) 352 SB
1969 2658 33 (...) 33 SB
2009 2658 42 (29) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
208 2719 200 (References) 200 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
418 2719 352 (................................) 352 SB
770 2719 352 (................................) 352 SB
1122 2719 352 (................................) 352 SB
1474 2719 352 (................................) 352 SB
1826 2719 176 (................) 176 SB
2009 2719 42 (29) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2770 146 (General) 146 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
407 2770 352 (................................) 352 SB
759 2770 352 (................................) 352 SB
1111 2770 352 (................................) 352 SB
1463 2770 352 (................................) 352 SB
1815 2770 187 (.................) 187 SB
2009 2770 42 (29) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2821 83 (RSA) 83 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
341 2821 352 (................................) 352 SB
693 2821 352 (................................) 352 SB
1045 2821 352 (................................) 352 SB
1397 2821 352 (................................) 352 SB
1749 2821 253 (.......................) 253 SB
2009 2821 42 (30) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2872 280 (Diffie-Hellman) 280 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
539 2872 352 (................................) 352 SB
891 2872 352 (................................) 352 SB
1243 2872 352 (................................) 352 SB
1595 2872 352 (................................) 352 SB
1947 2872 55 (.....) 55 SB
2009 2872 42 (30) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2923 344 (Digest Algorithms) 344 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
605 2923 352 (................................) 352 SB
957 2923 352 (................................) 352 SB
1309 2923 352 (................................) 352 SB
1661 2923 341 (...............................) 341 SB
2009 2923 42 (30) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 2974 81 (DES) 81 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
341 2974 352 (................................) 352 SB
693 2974 352 (................................) 352 SB
1045 2974 352 (................................) 352 SB
1397 2974 352 (................................) 352 SB
1749 2974 253 (.......................) 253 SB
2009 2974 42 (30) 42 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
256 3025 445 (Privacy-enhcanced mail) 445 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
704 3025 352 (................................) 352 SB
1056 3025 352 (................................) 352 SB
1408 3025 352 (................................) 352 SB
1760 3025 242 (......................) 242 SB
2009 3025 42 (31) 42 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1095 3214 21 (2) 21 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 4 4
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 100 100 0 0 0 97 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 193 849 (INTRODUCTION) 849 SB
255 255 255 fC
/fm 256 def
2020 15 155 316 B
1 F
n
0 0 0 fC
/fm 256 def
2020 8 155 332 B
1 F
n
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 516 618 (What is RSAEURO?) 618 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 624 1907 (RSAEURO is a cryptographic toolkit providing various functions for the use of digital signatures, data) 1907 SB
161 675 1930 (encryption and supporting areas \(PEM encoding, random number generation etc\).  To aid compatibility) 1930 SB
161 726 1272 (with existing software, RSAEURO is call-compatible with RSADSI's ) 1272 SB
1433 726 21 (\223) 21 SB
gs 874 3318 1454 0 CB
1454 726 160 (RSAREF) 160 SB
gr
1614 726 21 (\224) 21 SB
gs 693 3318 1635 0 CB
1635 726 489 ( toolkit. RSAEURO allows) 489 SB
gr
161 777 1970 (non-US residents to make use of much of the cryptographic software previously only \(legally\) available in) 1970 SB
161 828 135 (the US.) 135 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 929 465 (IMPORTANT NOTICE:) 465 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
626 931 1021 (  Please do not distribute or use this software in the US) 1021 SB
1647 931 11 ( ) 11 SB
1658 931 21 (\226) 21 SB
gs 649 3318 1679 0 CB
1679 931 89 ( it is ) 89 SB
gr
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
gs 649 3318 1679 0 CB
1768 930 115 (illegal ) 115 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 649 3318 1679 0 CB
1883 931 190 (to use this) 190 SB
gr
161 982 1995 (toolkit in the US, as PKP have a patent to public-key cryptography \(see the Patents and Trademarks section) 1995 SB
161 1033 1539 (below for details\).  If you are a US resident, please use the RSAREF toolkit instead.) 1539 SB
161 1134 861 (RSAEURO contains support for the following:) 861 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 1235 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 1243 1583 (RSA encryption, decryption and key generation.  Compatible with RSA Laboratories') 1583 SB
338 1294 725 (Public-Key Cryptography Standard #1.) 725 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 1395 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 1403 1596 (Generation and verification of message digests using MD2, MD4, MD5 and SHS \(SHS) 1596 SB
338 1454 1686 (currently not implemented in higher-level functions to maintain compatibility with PKCS\).) 1686 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 1555 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 1563 1679 (DES encryption and decryption using CBC \(1, 2 or 3 keys using Encrypt-Decrypt-Encrypt\)) 1679 SB
338 1614 883 (and DESX, RSADSI's secure DES enhancement.) 883 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 1715 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 1723 996 (Diffie-Hellman key agreement as defined in PKCS #3.) 996 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 1824 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 1832 260 (PEM support ) 260 SB
598 1832 21 (\226) 21 SB
gs 1709 3318 619 0 CB
619 1832 315 ( support for RFC) 315 SB
gr
gs 1709 3318 619 0 CB
934 1832 933 ( 1421 encoded ASCII data with all main functions.) 933 SB
gr
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 1933 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 1941 1664 (Key routines implemented in assembler for speed \(80386 and 680x0 currently supported\).) 1664 SB
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 2092 1069 (What is covered by this document?) 1069 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2200 2005 (This document provides overall instructions for the use of the various functions in the RSAEURO toolkit, at) 2005 SB
161 2251 1867 (a sufficient level to permit their use within other software.  It does not describe every function in the) 1867 SB
161 2302 568 (toolkit, just those required for ) 568 SB
729 2302 21 (\223) 21 SB
gs 1578 3318 750 0 CB
750 2302 199 (day to day) 199 SB
gr
949 2302 21 (\224) 21 SB
gs 1358 3318 970 0 CB
970 2302 1127 ( use \(all functions defined in RSAEURO.H are covered\).  For) 1127 SB
gr
161 2353 1985 (full details of the internal workings of the RSAEURO routines, please consult the \(well commented\) source) 1985 SB
161 2404 99 (code.) 99 SB
161 2505 1937 (It has been assumed that the reader is familiar with C programming and basic cryptography, although a) 1937 SB
161 2556 664 (detailed knowledge is not required.) 664 SB
161 2657 989 (This document is divided into the following sections:) 989 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
250 2758 457 (Introduction \(This section\)) 457 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
707 2759 685 (. General introduction to RSAEURO.) 685 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
250 2860 300 (Random numbers) 300 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
550 2861 1475 ( Routines for generating cryptographically- secure random numbers, for use by) 1475 SB
338 2912 717 (various other cryptographic functions.) 717 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
250 3013 482 (Digital signature processing) 482 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
732 3014 1168 ( Routines for the creation and verification of digital signatures.) 1168 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1095 3214 21 (3) 21 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Italic
%%+ font Palatino-Roman
%%Page: 5 5
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
0 0 0 fC
250 143 342 (Envelope processing) 342 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
592 144 816 ( Routines for the creation and use of digital ) 816 SB
1408 144 21 (\223) 21 SB
gs 899 3318 1429 0 CB
1429 144 186 (envelopes) 186 SB
gr
1615 144 21 (\224) 21 SB
gs 692 3318 1636 0 CB
1636 144 81 ( \(an ) 81 SB
gr
1717 144 21 (\223) 21 SB
gs 590 3318 1738 0 CB
1738 144 168 (envelope) 168 SB
gr
1906 144 21 (\224) 21 SB
gs 401 3318 1927 0 CB
1927 144 73 ( is a) 73 SB
gr
338 195 1312 (structure containing encrypted data and an optional digital signature\).) 1312 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
250 296 262 (PEM functions) 262 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
512 297 1356 ( Routines for processing Interned privacy-enhanced mail \(PEM\) encoded) 1356 SB
338 348 186 (messages.) 186 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
250 449 494 (Key generation and exchange) 494 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
744 450 1155 ( Routines for generating key material for RSA encryption, and) 1155 SB
338 501 884 (exchanging keys via Diffie-Hellman agreement.) 884 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
250 602 386 (Memory manipulation) 386 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
636 603 931 ( Platform-specific memory manipulation routines.) 931 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
250 704 376 (Technical information) 376 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
626 705 11 ( ) 11 SB
637 705 21 (\223) 21 SB
gs 1670 3318 658 0 CB
658 705 177 (Technical) 177 SB
gr
835 705 21 (\224) 21 SB
gs 1472 3318 856 0 CB
856 705 988 ( programming information, including descriptions of) 988 SB
gr
338 756 1406 (RSAEURO data structures, defined values and performance characteristics.) 1406 SB
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 907 780 (Typographic conventions) 780 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1015 1153 (Throughout this document, blocks of C source code are set in ) 1153 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
1314 1021 175 (courier) 175 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1489 1015 678 ( , and in-text references to functions,) 678 SB
161 1068 594 (constants and the like are set in ) 594 SB
32 0 0 42 42 0 0 0 40 /Helvetica /font12 ANSIFont font
755 1067 176 (helvetica.) 176 SB
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 1219 232 (Licence) 232 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1327 1322 (RSAEURO - Beta TOOLKIT LICENSE AGREEMENT April 22nd, 1995.) 1322 SB
161 1428 678 (Copyright \(c\) J.S.A.Kapp, 1994-1995.) 678 SB
250 1529 32 (1.) 32 SB
338 1529 1700 (LICENSE. J.S.A.Kapp grants you a nonexclusive, non-transferable, perpetual \(subject to the) 1700 SB
338 1580 1691 (conditions of section 7\) license for the "RSAEURO" toolkit \(the "Toolkit"\) and its associated) 1691 SB
338 1631 1259 (documentation, subject to all of the following terms and conditions:) 1259 SB
397 1732 23 (i.) 23 SB
486 1732 1031 (To use the Toolkit on any computer in your possession.) 1031 SB
397 1833 35 (ii.) 35 SB
486 1833 957 (to make copies of the Toolkit for back-up purposes.) 957 SB
397 1934 47 (iii.) 47 SB
486 1934 1453 (to modify the Toolkit in any manner for porting or performance improvement) 1453 SB
486 1985 1486 (purposes \(subject to Section 2\) or to incorporate the Toolkit into other computer) 1486 SB
486 2036 1408 (programs for your own personal or internal use, provided that you provide) 1408 SB
486 2087 1417 (J.S.A.Kapp with a copy of any such modification or Application Program by) 1417 SB
486 2138 1492 (electronic mail, and grant J.S.A.Kapp a perpetual, royalty-free license to use and) 1492 SB
486 2189 1506 (distribute such modifications and Application Programs on the terms set forth in) 1506 SB
486 2240 298 (this Agreement.) 298 SB
397 2341 47 (iv.) 47 SB
486 2341 1505 (To copy and distribute the Toolkit and Application Programs in accordance with) 1505 SB
486 2392 669 (the limitations set forth in Section 2.) 669 SB
338 2493 1658 ("Application Programs" are programs that incorporate all or any portion of the Toolkit in) 1658 SB
338 2544 1649 (any form. The restrictions imposed on Application Programs in this Agreement shall not) 1649 SB
338 2595 1633 (apply to any software which through the mere aggregation on distribution media, is co-) 1633 SB
338 2646 635 (located or stored with the Toolkit.) 635 SB
250 2747 32 (2.) 32 SB
338 2747 563 (LIMITATIONS ON LICENSE.) 563 SB
397 2848 23 (i.) 23 SB
486 2848 1507 (J.S.A.Kapp owns the Toolkit and its associated documentation and all copyrights) 1507 SB
486 2899 1480 (therein. You may only use, copy, modify and distribute the Toolkit as expressly) 1480 SB
486 2950 1529 (provided for in this Agreement. You must reproduce and include this Agreement,) 1529 SB
486 3001 1455 (J.S.A.Kapp's copyright notices and disclaimer of warranty on any copy and its) 1455 SB
486 3052 496 (associated documentation.) 496 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1095 3214 21 (4) 21 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Italic
%%+ font Palatino-Roman
%%Page: 6 6
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
0 0 0 fC
397 143 35 (ii.) 35 SB
486 143 1455 (The Toolkit and its associated documentation are freeware for noncommercial) 1455 SB
486 194 1557 (purposes, however for commercial purposes please contact J.S.A.Kapp for licensing) 1557 SB
486 245 134 (details.) 134 SB
397 346 47 (iii.) 47 SB
486 346 1547 (The Toolkit and Application Programs are to be used for noncommercial purposes.) 1547 SB
486 397 1356 (However, media costs associated with the distribution of the Program or) 1356 SB
486 448 766 (Application Programs may be recovered.) 766 SB
397 549 47 (iv.) 47 SB
486 549 1496 (The Toolkit, if modified, must carry prominent notices stating that changes have) 1496 SB
486 600 869 (been made, and the dates of any such changes.) 869 SB
397 701 35 (v.) 35 SB
486 701 1529 (Prior permission from J.S.A.Kapp is required for any modifications that access the) 1529 SB
486 752 1302 (Toolkit through ways other than the published Toolkit interface or for) 1302 SB
486 803 1452 (modifications to the Toolkit interface, and structures. J.S.A.Kapp will grant all) 1452 SB
486 854 1182 (reasonable requests for permission to make such modifications.) 1182 SB
250 955 32 (3.) 32 SB
338 955 1714 (You are solely responsible for all of your costs and expenses incurred in connection with the) 1714 SB
338 1006 1625 (distribution of the Toolkit or any Application Program hereunder, and J.S.A.Kapp shall) 1625 SB
338 1057 1704 (have no liability, obligation or responsibility there of. J.S.A.Kapp shall have no obligation to) 1704 SB
338 1108 1695 (provide maintenance, support, upgrades or new releases to you or to any distributee of the) 1695 SB
338 1159 679 (Toolkit or any Application Program.) 679 SB
250 1260 32 (4.) 32 SB
338 1260 1628 (THE TOOLKIT AND ITS ASSOCIATED DOCUMENTATION ARE LICENSED "AS IS") 1628 SB
338 1311 1601 (WITHOUT WARRANTY AS TO THEIR PERFORMANCE, MERCHANTABILITY OR) 1601 SB
338 1362 1668 (FITNESS FOR ANY PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE RESULTS) 1668 SB
338 1413 1485 (AND PERFORMANCE OF THE TOOLKIT IS ASSUMED BY YOU AND YOUR) 1485 SB
338 1464 1556 (DISTRIBUTEES. SHOULD THE TOOLKIT PROVE DEFECTIVE, YOU AND YOUR) 1556 SB
338 1515 1503 (DISTRIBUTEES \(AND NOT J.S.A.KAPP\) ASSUME THE ENTIRE COST OF ALL) 1503 SB
338 1566 1045 (NECESSARY SERVICING, REPAIR OR CORRECTION.) 1045 SB
250 1667 32 (5.) 32 SB
338 1667 1658 (LIMITATION OF LIABILITY, NEITHER J.S.A.KAPP NOR ANY OTHER PERSON WHO) 1658 SB
338 1718 1628 (HAS BEEN INVOLVED IN THE CREATION, PRODUCTION, OR DELIVERY OF THE) 1628 SB
338 1769 1710 (TOOLKIT SHALL BE LIABLE TO YOU OR TO ANY OTHER PERSON FOR ANY DIRECT,) 1710 SB
338 1820 1595 (INCIDENTAL OR CONSEQUENTIAL DAMAGES, EVEN IF J.S.A.KAPP HAS BEEN) 1595 SB
338 1871 1056 (ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.) 1056 SB
250 1972 43 (6. ) 43 SB
338 1972 1592 (RSAEURO is a publication of cryptographic techniques. Applications developed with) 1592 SB
338 2023 1632 (RSAEURO may be subject to export controls in some countries. If you are located in the) 1632 SB
338 2074 1681 (United States and develop such applications using RSAEURO, you are advised to obtain a) 1681 SB
338 2125 1648 (copy of RSAREF from RSADSI, as you may using RSAEURO infringe on Patents held by) 1648 SB
338 2176 831 (Public Key Partners of Sunnydale California.) 831 SB
250 2277 43 (7. ) 43 SB
338 2277 1714 (The license granted hereunder is effective until terminated. You may terminate it at anytime) 1714 SB
338 2328 1537 (by destroying all components of the Toolkit and its associated documentation. The) 1537 SB
338 2379 1515 (termination of your license will not result in the termination of the licenses of any) 1515 SB
338 2430 1607 (distributees who have received rights to the Toolkit through you so long as they are in) 1607 SB
338 2481 858 (compliance with the provisions of this license.) 858 SB
250 2582 32 (8.) 32 SB
338 2582 206 (GENERAL) 206 SB
397 2683 23 (i.) 23 SB
486 2683 1502 (Address all correspondence regarding this license to J.S.A.Kapp's electronic mail) 1502 SB
486 2734 836 (address <skapp@cix.compulink.co.uk>, or to) 836 SB
486 2835 282 (Mr J.S.A.Kapp.) 282 SB
486 2886 295 (The Post Office,) 295 SB
486 2937 294 (Dunsop Bridge,) 294 SB
486 2988 183 (Clitheroe,) 183 SB
486 3039 213 (Lancashire,) 213 SB
486 3090 346 (England. BB7 3BB.) 346 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1095 3214 21 (5) 21 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 7 7
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
0 0 0 fC
486 143 410 (Tel. \(+44\) 1200-448241) 410 SB
397 244 35 (ii.) 35 SB
486 244 1565 (For details of Export Controls and other controls regarding the use of cryptographic) 1565 SB
486 295 1112 (techniques please contact your country's relevant authority.) 1112 SB
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 446 722 (Patents and trademarks) 722 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 554 1821 (The following terms are registered trademarks as indicated.  All other trademarks acknowledged.) 1821 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 680 456 (Public Key Partners) 456 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 767 1946 (Public Key Partners \(PKP\) hold a number of patents covering various public-key cryptography methods.) 1946 SB
161 819 1542 (These patents are only valid in the USA.  PKP claim that they hold patent rights to ) 1542 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
1703 818 43 (all) 43 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1746 819 207 ( public-key) 207 SB
161 870 1283 (cryptography systems, although this claim is subject to much debate.) 1283 SB
161 971 962 (The following table details the patents held by PKP:) 962 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
gs 319 101 198 1072 CB
220 1072 253 (Patent number) 253 SB
gr
gs 231 101 518 1072 CB
541 1072 82 (Date) 82 SB
gr
gs 607 101 750 1072 CB
772 1072 162 (Inventors) 162 SB
gr
gs 606 101 1358 1072 CB
1381 1072 268 (Patent coverage) 268 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 319 101 198 1173 CB
220 1173 169 (4,200,770) 169 SB
gr
gs 231 101 518 1173 CB
541 1173 155 (30/3/80) 155 SB
gr
gs 607 101 750 1173 CB
772 1173 442 (Hellman, Diffie, Merkle) 442 SB
gr
gs 606 101 1358 1173 CB
1381 1173 541 (Diffie-Hellman key exchange) 541 SB
gr
gs 319 101 198 1274 CB
220 1274 169 (4,218,582) 169 SB
gr
gs 231 101 518 1274 CB
541 1274 155 (19/8/80) 155 SB
gr
gs 607 101 750 1274 CB
772 1274 315 (Hellman, Merkle) 315 SB
gr
gs 606 101 1358 1274 CB
1381 1274 510 (Merkle-Hellman knapsacks) 510 SB
gr
gs 319 101 198 1375 CB
220 1375 169 (4,405,829) 169 SB
gr
gs 231 101 518 1375 CB
541 1375 155 (20/9/83) 155 SB
gr
gs 607 101 750 1375 CB
772 1375 466 (Rivest, Shamir, Adleman) 466 SB
gr
gs 606 101 1358 1375 CB
1381 1375 277 (RSA algorithm) 277 SB
gr
gs 319 101 198 1476 CB
220 1476 169 (4,424,414) 169 SB
gr
gs 231 101 518 1476 CB
541 1476 134 (3/3/84) 134 SB
gr
gs 607 101 750 1476 CB
772 1476 302 (Hellman, Pohlig) 302 SB
gr
gs 606 101 1358 1476 CB
1381 1476 506 (Pohlig-Hellman encryption) 506 SB
gr
gs 319 101 198 1577 CB
220 1577 169 (4,995,082) 169 SB
gr
gs 231 101 518 1577 CB
541 1577 155 (19/2/91) 155 SB
gr
gs 607 101 750 1577 CB
772 1577 146 (Schnorr) 146 SB
gr
gs 606 51 1358 1577 CB
1381 1577 349 (Schnorr signatures) 349 SB
gr
161 1729 1377 (Anyone interested in the use of these algorithms in the US should contact:) 1377 SB
220 1830 328 (Robert B Fougner) 328 SB
220 1881 392 (Director of Licensing) 392 SB
220 1932 367 (Public Key Partners) 367 SB
220 1983 313 (130B Kifer Court) 313 SB
220 2034 195 (Sunnyvale) 195 SB
220 2085 179 (CA 94086) 179 SB
220 2187 343 (Tel. \(408\) 735-6779) 343 SB
161 2290 1474 (Please note that the use of RSAEURO within the juristiction of PKP's patents is ) 1474 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
1635 2288 188 (ILLEGAL) 188 SB
1823 2288 11 ( ) 11 SB
1834 2288 21 (\226) 21 SB
gs 473 3318 1855 0 CB
1855 2288 11 ( ) 11 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 473 3318 1855 0 CB
1866 2290 284 (you should use) 284 SB
gr
161 2341 639 (RSADSI's RSAREF toolkit instead.) 639 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2467 198 (RSADSI) 198 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2554 1881 (RSA Data Security Inc \(RSADSI\) provide consultancy and software engineering service in the field of) 1881 SB
161 2605 1892 (cryptography.  The RSAREF toolkit, on which RSAEURO is modelled, is available free of charge from) 1892 SB
161 2656 1342 (RSADSI with the USA and Canada, subject to their licensing agreement.) 1342 SB
161 2757 529 (RSADSI can be contacted at:) 529 SB
220 2858 425 (RSA Data Security Inc,) 425 SB
220 2909 431 (10 Twin Dolphin Drive) 431 SB
220 2960 271 (Redwood City) 271 SB
220 3011 179 (CA 94065) 179 SB
220 3113 354 (Tel. \(415\) 595-8782.) 354 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1095 3214 21 (6) 21 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Palatino-Bold
%%+ font Palatino-Italic
%%+ font Palatino-Roman
%%Page: 8 8
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
0 0 0 fC
161 143 1076 (DESX and RSAREF are registered trademarks of RSADSI.) 1076 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 269 332 (Miscellaneous) 332 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 356 272 (To be advised.) 272 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1095 3214 21 (7) 21 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 9 9
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 100 100 0 0 0 97 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 193 1046 (RANDOM NUMBERS) 1046 SB
255 255 255 fC
/fm 256 def
2020 15 155 316 B
1 F
n
0 0 0 fC
/fm 256 def
2020 8 155 332 B
1 F
n
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 516 386 (Introduction) 386 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 624 1892 (Various functions within RSAEURO require random data \(primarily for key generation\).  A stream of) 1892 SB
161 675 1697 (random \(strictly, pseudo-random\) data is generated using the MD5 digest algorithm and a ) 1697 SB
1858 675 21 (\223) 21 SB
gs 449 3318 1879 0 CB
1879 675 84 (seed) 84 SB
gr
1963 675 21 (\224) 21 SB
gs 344 3318 1984 0 CB
1984 675 124 ( value,) 124 SB
gr
161 726 685 (which is provided in the form of the ) 685 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
846 729 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
975 726 191 ( structure.) 191 SB
161 827 1059 (Before use, the random structure must be initialised and ) 1059 SB
1220 827 21 (\223) 21 SB
gs 1087 3318 1241 0 CB
1241 827 130 (seeded) 130 SB
gr
1371 827 21 (\224) 21 SB
gs 936 3318 1392 0 CB
1392 827 180 ( itself, by ) 180 SB
gr
1572 827 21 (\223) 21 SB
gs 735 3318 1593 0 CB
1593 827 177 (mixing in) 177 SB
gr
1770 827 21 (\224) 21 SB
gs 537 3318 1791 0 CB
1791 827 259 ( an amount of) 259 SB
gr
161 878 1677 (genuine random data.  The procedure for preparing a new random structure is as follows:) 1677 SB
250 979 21 (1) 21 SB
338 979 910 (Reserve sizeof\(R_RANDOM_STRUCT\) memory.) 910 SB
250 1080 21 (2) 21 SB
338 1080 622 (Initialise the new structure using ) 622 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
960 1083 242 (R_RandomInit) 242 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1202 1080 205 (.  This sets ) 205 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1407 1083 129 (random) 129 SB
1536 1083 258 (->bytesNeeded) 258 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1794 1080 237 (, the number) 237 SB
338 1131 536 (of random bytes required to ) 536 SB
874 1131 21 (\223) 21 SB
gs 1433 3318 895 0 CB
895 1131 84 (seed) 84 SB
gr
979 1131 21 (\224) 21 SB
gs 1328 3318 1000 0 CB
1000 1131 1047 ( the structure before use, to RANDOM_BYTES_RQ, and) 1047 SB
gr
338 1182 292 (zeroes the data.) 292 SB
250 1283 21 (3) 21 SB
338 1283 21 (\223) 21 SB
gs 1969 3318 359 0 CB
359 1283 121 (Mix in) 121 SB
gr
480 1283 21 (\224) 21 SB
gs 1827 3318 501 0 CB
501 1283 780 ( a suitable quantity of random data using ) 780 SB
gr
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
gs 1827 3318 501 0 CB
1281 1286 313 (R_RandomUpdate) 313 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 1827 3318 501 0 CB
1594 1283 33 (.  ) 33 SB
gr
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
gs 1827 3318 501 0 CB
1627 1286 313 (R_RandomUpdate) 313 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 1827 3318 501 0 CB
1940 1283 107 ( takes) 107 SB
gr
338 1334 1641 (a caller-supplied block of data and combines it with the existing random structure using) 1641 SB
338 1385 127 (MD5.  ) 127 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
465 1388 313 (R_RandomUpdate) 313 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
778 1385 322 ( also decrements ) 322 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1100 1388 387 (random->bytesNeeded) 387 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1487 1385 537 (, which indicates the amount) 537 SB
338 1436 634 (of random data still required \(the ) 634 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
972 1439 480 (R_GetRandomBytesNeeded) 480 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1452 1436 381 ( function returns the) 381 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
338 1490 223 (bytesNeeded) 223 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
561 1487 318 ( value of a given ) 318 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
879 1490 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1008 1487 227 ( structure\).  ) 227 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1235 1490 313 (R_RandomUpdate) 313 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1548 1487 314 ( should be called) 314 SB
338 1538 307 (repeatedly until ) 307 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
645 1541 480 (R_GetRandomBytesNeeded) 480 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1125 1538 249 ( returns zero.) 249 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 1643 313 (R_RandomUpdate) 313 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
474 1640 1004 ( may be called once the structure has been initialised \() 1004 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
1478 1639 28 (ie) 28 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1506 1640 11 ( ) 11 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1517 1643 223 (bytesNeeded) 223 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1740 1640 248 ( equals zero\).) 248 SB
161 1691 1120 (RANDOM_BYTES_RQ should be adjusted according to the ) 1120 SB
1281 1691 21 (\223) 21 SB
gs 1026 3318 1302 0 CB
1302 1691 116 (purity) 116 SB
gr
1418 1691 21 (\224) 21 SB
gs 889 3318 1439 0 CB
1439 1691 513 ( of the random data source.) 513 SB
gr
161 1792 447 (An additional function, ) 447 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
608 1795 305 (R_RandomCreate) 305 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
913 1792 462 (, creates and initialises a ) 462 SB
1375 1792 21 (\223) 21 SB
gs 932 3318 1396 0 CB
1396 1792 93 (fresh) 93 SB
gr
1489 1792 21 (\224) 21 SB
gs 818 3318 1510 0 CB
1510 1792 11 ( ) 11 SB
gr
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
gs 818 3318 1510 0 CB
1521 1795 129 (random) 129 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 818 3318 1510 0 CB
1650 1792 488 ( structure using data from) 488 SB
gr
161 1843 727 (the current system clock, via the ANSI ) 727 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
888 1846 125 (gmtime) 125 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1013 1843 888 ( function \(this function uses a separate variable,) 888 SB
161 1894 1976 (RANDOM_BYTES_INT, to indicate the amount of mix-in bytes, currently set to 512\).  On ANSI-compliant) 1976 SB
161 1945 170 (systems, ) 170 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
331 1948 305 (R_RandomCreate) 305 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
636 1945 322 ( can be used as a ) 322 SB
958 1945 21 (\223) 21 SB
gs 1349 3318 979 0 CB
979 1945 262 (one-stop shop) 262 SB
gr
1241 1945 21 (\224) 21 SB
gs 1066 3318 1262 0 CB
1262 1945 559 ( for producing a ready-to-use ) 559 SB
gr
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
gs 1066 3318 1262 0 CB
1821 1948 129 (random) 129 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 1066 3318 1262 0 CB
1950 1945 191 ( structure.) 191 SB
gr
161 1996 1845 (Other sources of random data, such as keyboard timings, disk latency and so on are highly system-) 1845 SB
161 2047 900 (dependant, and have not yet been implemented.) 900 SB
161 2148 139 (Once a ) 139 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
300 2151 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
429 2148 1290 ( structure has been created, initialised and seeded, it may be used by ) 1290 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1719 2151 302 (R_GenerateBytes) 302 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
2021 2148 48 ( to) 48 SB
161 2199 798 (produce a stream of pseudo-random data. ) 798 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
959 2202 302 (R_GenerateBytes) 302 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1261 2199 652 ( will fail if an invalid \(non-seeded\) ) 652 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1913 2202 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2250 429 (structure is referenced.) 429 SB
161 2351 247 (The function ) 247 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
408 2354 250 (R_RandomMix) 250 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
658 2351 287 ( uses the ANSI ) 287 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
945 2354 136 (gmtime ) 136 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1081 2351 997 (function to randomise the current state of an existing,) 997 SB
161 2402 533 (initialised random structure.) 533 SB
161 2503 247 (The function ) 247 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
408 2506 272 (R_RandomFinal) 272 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
680 2503 161 ( clears a ) 161 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
841 2506 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
970 2503 191 ( structure.) 191 SB
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 2654 664 (Function descriptions) 664 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2787 340 (R_RandomInit) 340 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2874 1775 (int R_RandomInit\(random\)R_RANDOM_STRUCT *random; /* random structure */) 1775 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2958 310 (Initialises a new ) 310 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
471 2961 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
600 2958 765 ( structure.  Zeroes the data area and sets ) 765 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1365 2961 387 (random->bytesNeeded) 387 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1752 2958 401 ( to the system default) 401 SB
161 3009 935 (\(RANDOM_BYTES_RQ\).  Always returns ID_OK.) 935 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1095 3214 21 (8) 21 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Italic
%%+ font Palatino-Roman
%%Page: 10 10
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 168 424 (R_RandomUpdate) 424 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 255 950 (int R_RandomUpdate\(random, block, len\)) 950 SB
161 297 1875 (R_RANDOM_STRUCT *random;                             /* random structure */) 1875 SB
161 339 1875 (unsigned char *block;                                   /* block of data */) 1875 SB
161 381 1875 (unsigned int len;                                     /* length of block */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 465 604 (Updates a previously initialised ) 604 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
765 468 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
894 465 1227 ( structure by mixing in a block of caller-supplied data using MD5.) 1227 SB
161 516 168 (Updates ) 168 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
329 519 387 (random->bytesNeeded) 387 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
716 516 744 ( as appropriate. Always returns ID_OK.) 744 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 642 644 (R_GetRandomBytesNeeded) 644 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 729 1175 (int R_GetRandomBytesNeeded\(bytesNeeded, random\)) 1175 SB
161 771 1875 (unsigned int *bytesNeeded               /* number of mix-in bytes needed */) 1875 SB
161 813 1875 (R_RANDOM_STRUCT *random                              /* random structure */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 897 1020 (Returns the number of seed bytes still required for the ) 1020 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1181 900 140 (random ) 140 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1321 897 349 (structure. On exit, ) 349 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1670 900 234 (bytesNeeded ) 234 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1904 897 224 (contains the) 224 SB
161 948 792 (number of bytes required by the structure ) 792 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
953 951 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1082 948 474 (.  Always returns ID_OK.) 474 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1074 395 (R_GenerateBytes) 395 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1161 975 (int R_GenerateBytes\(block, len, random\)) 975 SB
161 1203 1875 (unsigned char *block;                                           /* block */) 1875 SB
161 1245 1875 (unsigned int len;                                     /* length of block */) 1875 SB
161 1287 1875 (R_RANDOM_STRUCT *random;                             /* random structure */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1371 194 (Populates ) 194 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
355 1374 99 (block ) 99 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
454 1371 96 (with ) 96 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
550 1374 61 (len ) 61 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
611 1371 677 (pseudo-random bytes derived from ) 677 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1288 1374 140 (random ) 140 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1428 1371 375 (using MD5. Returns) 375 SB
161 1422 1507 (RE_NEED_RANDOM if random has not been fully initialised, ID_OK otherwise.) 1507 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1548 374 (R_RandomFinal) 374 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1635 650 (void R_RandomFinal\(random\)) 650 SB
161 1677 1875 (R_RANDOM_STRUCT *random;                             /* random structure */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1761 161 (Clears a ) 161 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
322 1764 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
451 1761 840 ( structure, setting all values and data to zero.) 840 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1887 403 (R_RandomCreate) 403 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1974 675 (void R_RandomCreate\(random\)) 675 SB
161 2016 1875 (R_RANDOM_STRUCT *random;                             /* random structure */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2100 220 (Initialises a ) 220 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
381 2103 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
510 2100 1065 ( structure and seeds it with data derived using the ANSI ) 1065 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1575 2103 125 (gmtime) 125 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1700 2100 437 ( function.  The quantity) 437 SB
161 2151 1065 (of seeding data is defined by RANDOM_BYTES_RQINT.) 1065 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2277 348 (R_RandomMix) 348 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2364 600 (void R_RandomMix\(random\)) 600 SB
161 2406 600 (R_RANDOM_STRUCT *random;) 600 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2490 851 (Randomises the internal state of the supplied ) 851 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1012 2493 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1141 2490 694 ( structure, using data from the ANSI ) 694 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1835 2493 86 (clock) 86 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1921 2490 93 ( and ) 93 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
2014 2493 72 (time) 72 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2541 184 (functions.) 184 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1095 3214 21 (9) 21 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 11 11
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 100 100 0 0 0 97 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 193 985 (MESSAGE DIGESTS) 985 SB
255 255 255 fC
/fm 256 def
2020 15 155 316 B
1 F
n
0 0 0 fC
/fm 256 def
2020 8 155 332 B
1 F
n
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 516 386 (Introduction) 386 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 624 1955 (RSAEURO provides supports four different message digest methods: MD2, MD4, MD5 and Secure Hash) 1955 SB
161 675 300 (Standard \(SHS\).) 300 SB
161 776 1211 (Support for each digest method consists of three basic functions: ) 1211 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1372 779 48 (init) 48 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1420 776 554 (, which initialises the relevant) 554 SB
161 827 456 (structures and contexts; ) 456 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
617 830 116 (update) 116 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
733 827 676 (, which adds data to the digest, and ) 676 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1409 830 69 (final) 69 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1478 827 136 ( which ) 136 SB
1614 827 21 (\223) 21 SB
gs 693 3318 1635 0 CB
1635 827 163 (tidies up) 163 SB
gr
1798 827 21 (\224) 21 SB
gs 509 3318 1819 0 CB
1819 827 297 ( and returns the) 297 SB
gr
161 878 1776 (final digest value.  To simplify implementation, the digest and signature routines are called via ) 1776 SB
1937 878 21 (\223) 21 SB
gs 370 3318 1958 0 CB
1958 878 121 (parent) 121 SB
gr
2079 878 21 (\224) 21 SB
161 929 1121 (routines, with the method to be used passed as a parameter.) 1121 SB
161 1030 1963 (High-level functions are provided for processing data which is memory-resident.  These functions handle) 1963 SB
161 1081 1391 (all memory allocation, initialisation and processing internally, providing a ) 1391 SB
1552 1081 21 (\223) 21 SB
gs 755 3318 1573 0 CB
1573 1081 262 (one-stop shop) 262 SB
gr
1835 1081 21 (\224) 21 SB
gs 472 3318 1856 0 CB
1856 1081 173 ( solution.) 173 SB
gr
161 1132 1963 (However, as the data to be processed must be resident in memory, the run-time resource requirements of) 1963 SB
161 1183 1114 (these functions are larger than the init-update-final method.) 1114 SB
161 1284 1117 (The procedure for producing a message digest is as follows:) 1117 SB
250 1385 21 (1) 21 SB
338 1385 363 (Initialise the digest ) 363 SB
701 1385 21 (\223) 21 SB
gs 1606 3318 722 0 CB
722 1385 136 (context) 136 SB
gr
858 1385 21 (\224) 21 SB
gs 1449 3318 879 0 CB
879 1385 1077 (, containing the digest generator state, input buffer etc, by) 1077 SB
gr
338 1436 134 (calling ) 134 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
472 1439 206 (R_DigestInit) 206 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
678 1436 1329 (.  The digest type \(MD2, MD4, MD5 or SHS\) is specified as a parameter) 1329 SB
338 1487 48 (to ) 48 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
386 1490 206 (R_DigestInit) 206 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
592 1487 11 (.) 11 SB
250 1588 21 (2) 21 SB
338 1588 885 (Process the source data a block at a time, using ) 885 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1223 1591 277 (R_DigestUpdate) 277 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1500 1588 11 (.) 11 SB
250 1689 21 (3) 21 SB
338 1689 679 (Produce the final digest value using ) 679 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1017 1692 236 (R_DigestFinal) 236 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1253 1689 11 (.) 11 SB
161 1790 447 (An additional function, ) 447 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
608 1793 247 (R_DigestBlock) 247 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
855 1790 759 (, may be used for memory-resident data.) 759 SB
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 1941 301 (Functions) 301 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2074 296 (R_DigestInit) 296 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2161 925 (int R_DigestInit\(context, digesttype\)) 925 SB
161 2203 1875 (R_DIGEST_CTX *context;                                    /* new context */) 1875 SB
161 2245 1875 (int digesttype;                              /* message-digest algorithm */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2329 1985 (Initialises a context ready for digest production.  The R_DIGEST_CTX type is a union structure supporting) 1985 SB
161 2380 1339 (the different context types required for each message digest algorithm.  ) 1339 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1500 2383 123 (context) 123 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1623 2380 310 ( is a pointer to a ) 310 SB
1933 2380 21 (\223) 21 SB
gs 374 3318 1954 0 CB
1954 2380 103 (blank) 103 SB
gr
2057 2380 21 (\224) 21 SB
161 2431 509 (R_DIGEST_CTX structure, ) 509 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
670 2434 173 (digesttype) 173 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
843 2431 1309 ( indicates the digest algorithm to be used.  Currently supported digest) 1309 SB
161 2482 1967 (types are DA_MD2, DA_MD4, DA_MD5 and DA_SHS.  Returns RE_DIGEST_ALGORITHM if an invalid) 1967 SB
161 2533 1126 (\(unsupported\) digest algorithm is selected, IDOK otherwise.) 1126 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2659 380 (R_DigestUpdate) 380 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2746 1150 (int R_DigestUpdate\(context, partIn, partInLen\)) 1150 SB
161 2788 1875 (R_DIGEST_CTX *context;                                        /* context */) 1875 SB
161 2830 1875 (unsigned char *partIn;                                 /* next data part */) 1875 SB
161 2872 1875 (unsigned int partInLen;                      /* length of next data part */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2956 168 (Updates ) 168 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
329 2959 123 (context) 123 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
452 2956 1710 ( using the appropriate digest algorithm \(as indicated by the context\) with the supplied data.) 1710 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 3010 98 (partIn) 98 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
259 3007 470 ( points to the data block, ) 470 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
729 3010 161 (partInLen) 161 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
890 3007 937 ( indicates the length of the block in bytes.  Returns) 937 SB
161 3058 1888 (RE_DIGEST_ALGORITHM if an invalid \(unsupported\) digest algorithm is selected, IDOK otherwise.) 1888 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (10) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 12 12
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 168 330 (R_DigestFinal) 330 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 255 1125 (int R_DigestFinal\(context, digest, digestLen\)) 1125 SB
161 297 1875 (R_DIGEST_CTX *context;                                        /* context */) 1875 SB
161 339 1875 (unsigned char *digest;                                 /* message digest */) 1875 SB
161 381 1875 (unsigned int *digestLen;                     /* length of message digest */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 465 686 (Produces the final digest value from ) 686 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
847 468 123 (context) 123 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
970 465 191 (.  On exit, ) 191 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1161 468 101 (digest) 101 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1262 465 620 ( contains the message digest and ) 620 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1882 468 164 (digestLen) 164 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 516 724 (indicates length of the digest in bytes.  ) 724 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
885 519 236 (R_DigestFinal) 236 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1121 516 976 ( also zeroes the context to remove any sensitive data) 976 SB
161 567 1840 (from memory.  Returns RE_DIGEST_ALGORITHM if an invalid \(unsupported\) digest algorithm is) 1840 SB
161 618 486 (selected, IDOK otherwise.) 486 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 744 343 (R_DigestBlock) 343 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 831 1750 (int R_DigestBlock\(digest, digestLen, block, blockLen, digestAlgorithm\)) 1750 SB
161 873 1875 (unsigned char *digest;                                 /* message digest */) 1875 SB
161 915 1875 (unsigned int *digestLen;                     /* length of message digest */) 1875 SB
161 957 1875 (unsigned char *block;                                           /* block */) 1875 SB
161 999 1875 (unsigned int blockLen;                                /* length of block */) 1875 SB
161 1041 1875 (int digestAlgorithm;                         /* message-digest algorithm */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1125 1109 (Produces a digest of the data block supplied \(pointed to by ) 1109 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1270 1128 88 (block) 88 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1358 1125 22 (, ) 22 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1380 1128 151 (blockLen) 151 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1531 1125 533 ( bytes long\), using the digest) 533 SB
161 1176 436 (algorithm indicated by ) 436 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
597 1179 261 (digestAlgorithm) 261 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
858 1176 715 (.  On success, the digest is returned in ) 715 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1573 1179 101 (digest) 101 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1674 1176 407 (, and the length of the) 407 SB
161 1227 407 (digest is indicated by ) 407 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
568 1230 164 (digestLen) 164 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
732 1227 1241 (.  Context creation, initialisation and clearing is handled internally.) 1241 SB
161 1328 1840 (Returns RE_DIGEST_ALGORITHM if an invalid \(unsupported\) digest algorithm is selected, IDOK) 1840 SB
161 1379 194 (otherwise.) 194 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (11) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 13 13
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 100 100 0 0 0 97 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 193 1666 (DIGITAL SIGNATURE ROUTINES) 1666 SB
255 255 255 fC
/fm 256 def
2020 15 155 316 B
1 F
n
0 0 0 fC
/fm 256 def
2020 8 155 332 B
1 F
n
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 516 386 (Introduction) 386 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 624 1837 (RSAEURO provides support for digital signatures using MD2, MD4 and MD5 digests \(to maintain) 1837 SB
161 675 1866 (compliance with PKCS #1, SHS cannot be used for digital signatures, as it produces a 160 bit digest\).) 1866 SB
161 776 1008 (Signature generation consists of three basic functions: ) 1008 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1169 779 48 (init) 48 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1217 776 834 (, which initialises the relevant structures and) 834 SB
161 827 176 (contexts; ) 176 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
337 830 116 (update) 116 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
453 827 676 (, which adds data to the digest, and ) 676 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1129 830 69 (final) 69 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1198 827 136 ( which ) 136 SB
1334 827 21 (\223) 21 SB
gs 973 3318 1355 0 CB
1355 827 163 (tidies up) 163 SB
gr
1518 827 21 (\224) 21 SB
gs 789 3318 1539 0 CB
1539 827 610 (, generates the final digest value,) 610 SB
gr
161 878 1920 (and encrypts it using the sender's secret key to produce the signature.  To simplify implementation, the) 1920 SB
161 929 607 (signature routines are called via ) 607 SB
768 929 21 (\223) 21 SB
gs 1539 3318 789 0 CB
789 929 121 (parent) 121 SB
gr
910 929 21 (\224) 21 SB
gs 1397 3318 931 0 CB
931 929 1051 ( routines, with the digest algorithm required passed as a) 1051 SB
gr
161 980 203 (parameter.) 203 SB
161 1081 1963 (High-level functions are provided for processing data which is memory-resident.  These functions handle) 1963 SB
161 1132 1391 (all memory allocation, initialisation and processing internally, providing a ) 1391 SB
1552 1132 21 (\223) 21 SB
gs 755 3318 1573 0 CB
1573 1132 262 (one-stop shop) 262 SB
gr
1835 1132 21 (\224) 21 SB
gs 472 3318 1856 0 CB
1856 1132 173 ( solution.) 173 SB
gr
161 1183 1963 (However, as the data to be processed must be resident in memory, the run-time resource requirements of) 1963 SB
161 1234 1114 (these functions are larger than the init-update-final method.) 1114 SB
161 1335 1141 (The procedure for producing a digital signature is as follows:) 1141 SB
250 1436 21 (1) 21 SB
338 1436 762 (Initialise the signature context by calling ) 762 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1100 1439 174 (R_SignInit) 174 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1274 1436 701 (.  The message digest type required is) 701 SB
338 1487 1551 (passed as a parameter.  To maintain PKCS #1 compatibility, SHS will be rejected by) 1551 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
338 1541 174 (R_SignInit) 174 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
512 1538 310 ( as a digest type.) 310 SB
250 1639 21 (2) 21 SB
338 1639 874 (Process the source data a block at a time using ) 874 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1212 1642 245 (R_SignUpdate) 245 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1457 1639 11 (.) 11 SB
250 1740 21 (3) 21 SB
338 1740 627 (Produce the final signature using ) 627 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
965 1743 204 (R_SignFinal) 204 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1169 1740 749 (.  The sender's private key is passed as a) 749 SB
338 1791 1188 (parameter.  RSA is the only algorithm supported for signatures.) 1188 SB
161 1892 447 (An additional function, ) 447 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
608 1895 215 (R_SignBlock) 215 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
823 1892 1190 (, may be used to produce a signature for memory-resident data.) 1190 SB
161 1993 1820 (RSAEURO also provides routines for verifying a supplied signature.  The procedure is as follows:) 1820 SB
250 2094 21 (1) 21 SB
338 2094 762 (Initialise the signature context by calling ) 762 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1100 2097 196 (R_VerifyInit) 196 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1296 2094 701 (.  The message digest type required is) 701 SB
338 2145 1551 (passed as a parameter.  To maintain PKCS #1 compatibility, SHS will be rejected by) 1551 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
338 2199 174 (R_SignInit) 174 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
512 2196 310 ( as a digest type.) 310 SB
250 2297 21 (2) 21 SB
338 2297 874 (Process the source data a block at a time using ) 874 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1212 2300 267 (R_VerifyUpdate) 267 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1479 2297 11 (.) 11 SB
250 2398 21 (3) 21 SB
338 2398 1341 (Produce the final digest and verify it against a supplied signature using ) 1341 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1679 2401 226 (R_VerifyFinal) 226 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1905 2398 103 (.  The) 103 SB
338 2449 1568 (sender's public key is passed as a parameter, to allow the decryption of the supplied) 1568 SB
338 2500 1170 (signature.  RSA is the only algorithm supported for signatures.) 1170 SB
161 2601 447 (An additional function, ) 447 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
608 2604 237 (R_VerifyBlock) 237 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
845 2601 1145 (, may be used to verify a signature for memory-resident data.) 1145 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (12) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 14 14
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 193 301 (Functions) 301 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 326 252 (R_SignInit) 252 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 413 875 (int R_SignInit\(context, digesttype\)) 875 SB
161 455 1875 (R_SIGNATURE_CTX *context;                                 /* new context */) 1875 SB
161 497 1875 (int digesttype;                              /* message-digest algorithm */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 581 1869 (Initialises a digest context ready for signature production.  The R_SIGNATURE_CTX type is a union) 1869 SB
161 632 1736 (structure supporting the different context types required for each message digest algorithm.  ) 1736 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1897 635 123 (context) 123 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
2020 632 73 ( is a) 73 SB
161 683 226 (pointer to a ) 226 SB
387 683 21 (\223) 21 SB
gs 1920 3318 408 0 CB
408 683 103 (blank) 103 SB
gr
511 683 21 (\224) 21 SB
gs 1796 3318 532 0 CB
532 683 616 ( R_SIGNATURE_CTX structure, ) 616 SB
gr
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
gs 1796 3318 532 0 CB
1148 686 173 (digesttype) 173 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 1796 3318 532 0 CB
1321 683 777 ( indicates the digest algorithm to be used.) 777 SB
gr
161 734 1945 (Returns RE_DIGEST_ALGORITHM if an invalid digest type is specified \(such as SHS\), IDOK otherwise.) 1945 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 860 336 (R_SignUpdate) 336 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 947 1100 (int R_SignUpdate\(context, partIn, partInLen\)) 1100 SB
161 989 1875 (R_SIGNATURE_CTX *context;                                     /* context */) 1875 SB
161 1031 1875 (unsigned char *partIn;                                 /* next data part */) 1875 SB
161 1073 1875 (unsigned int partInLen;                      /* length of next data part */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1157 168 (Updates ) 168 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
329 1160 134 (context ) 134 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
463 1157 1688 (using the appropriate digest algorithm \(as indicated by the context\) with the supplied data) 1688 SB
161 1208 14 (\() 14 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
175 1211 161 (partInLen) 161 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
336 1208 222 ( bytes from ) 222 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
558 1211 98 (partIn) 98 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
656 1208 1501 (\).  Returns RE_DIGEST_ALGORITHM if an invalid digest type is specified \(such) 1501 SB
161 1259 480 (as SHS\), IDOK otherwise.) 480 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1385 286 (R_SignFinal) 286 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1472 1525 (int R_SignFinal\(context, signature, signatureLen, privateKey\)) 1525 SB
161 1514 1875 (R_SIGNATURE_CTX *context;                                     /* context */) 1875 SB
161 1556 1875 (unsigned char *signature;                                   /* signature */) 1875 SB
161 1598 1875 (unsigned int *signatureLen;                       /* length of signature */) 1875 SB
161 1640 1875 (R_RSA_PRIVATE_KEY *privateKey;               /* signer's RSA private key */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1724 1965 (Produces a signature from the supplied context and private key.  The digest value is first calculated using) 1965 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 1778 247 (R_DigestFinal ) 247 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
408 1775 151 (and the ) 151 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
559 1778 123 (context) 123 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
682 1775 932 (, and this value is then encrypted using RSA with ) 932 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1614 1778 173 (privatekey) 173 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1787 1775 302 (.  The encrypted) 302 SB
161 1826 375 (value is returned in ) 375 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
536 1829 156 (signature) 156 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
692 1826 865 (, and the length of the signature is returned in ) 865 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1557 1829 219 (signatureLen) 219 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1776 1826 179 (.  Returns) 179 SB
161 1877 1903 (RE_PRIVATE_KEY if the private key is invalid, RE_DIGEST_ALGORITHM if an invalid digest type is) 1903 SB
161 1928 768 (specified \(such as SHS\), IDOK otherwise.) 768 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 2032 204 (R_SignFinal) 204 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
365 2029 11 ( ) 11 SB
376 2029 21 (\223) 21 SB
gs 1931 3318 397 0 CB
397 2029 139 (restarts) 139 SB
gr
536 2029 21 (\224) 21 SB
gs 1771 3318 557 0 CB
557 2029 1403 ( the signature context, ready for re-use, and clears all sensitive information.) 1403 SB
gr
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2155 299 (R_SignBlock) 299 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2242 1825 (int R_SignBlock\(signature, signatureLen, block, blockLen,digestAlgorithm,) 1825 SB
161 2284 675 (                privateKey\)) 675 SB
161 2326 1875 (unsigned char *signature;                                   /* signature */) 1875 SB
161 2368 1875 (unsigned int *signatureLen;                       /* length of signature */) 1875 SB
161 2410 1875 (unsigned char *block;                                           /* block */) 1875 SB
161 2452 1875 (unsigned int blockLen;                                /* length of block */) 1875 SB
161 2494 1875 (int digestAlgorithm;                         /* message-digest algorithm */) 1875 SB
161 2536 1875 (R_RSA_PRIVATE_KEY *privateKey;               /* signer's RSA private key */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2620 1187 (Produces a signature for the data block supplied \(pointed to by ) 1187 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1348 2623 88 (block) 88 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1436 2620 22 (, ) 22 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1458 2623 151 (blockLen) 151 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1609 2620 249 ( bytes long\).  ) 249 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1858 2623 261 (digestAlgorithm) 261 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2671 915 (indicates the required message digest algorithm, ) 915 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1076 2674 179 (privateKey) 179 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1255 2671 837 ( is the sender's RSA private key.  On success,) 837 SB
161 2722 278 (returns IDOK, ) 278 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
439 2725 156 (signature) 156 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
595 2722 638 ( contains the generated signature, ) 638 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1233 2725 219 (signatureLen) 219 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1452 2722 647 ( indicates the length in bytes of the) 647 SB
161 2773 1858 (signature.  On error, returns RE_DIGEST_ALGORITHM if an invalid digest algorithm is selected or) 1858 SB
161 2824 883 (RE_PRIVATE_KEY if the private key is invalid.) 883 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (13) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 15 15
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 168 292 (R_VerifyInit) 292 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 255 925 (int R_VerifyInit\(context, digesttype\)) 925 SB
161 297 1875 (R_SIGNATURE_CTX *context;                                 /* new context */) 1875 SB
161 339 1875 (int digesttype;                              /* message-digest algorithm */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 423 188 (Initialises ) 188 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
349 426 134 (context ) 134 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
483 423 1551 (ready for signature verification. The R_SIGNATURE_CTX type is a union structure) 1551 SB
161 474 1556 (supporting the different context types required for each message digest algorithm.  ) 1556 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1717 477 123 (context) 123 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1840 474 299 ( is a pointer to a) 299 SB
161 525 21 (\223) 21 SB
gs 2146 3318 182 0 CB
182 525 103 (blank) 103 SB
gr
285 525 21 (\224) 21 SB
gs 2022 3318 306 0 CB
306 525 616 ( R_SIGNATURE_CTX structure, ) 616 SB
gr
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
gs 2022 3318 306 0 CB
922 528 173 (digesttype) 173 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 2022 3318 306 0 CB
1095 525 923 ( indicates the digest algorithm to be used.Returns) 923 SB
gr
161 576 1788 (RE_DIGEST_ALGORITHM if an invalid digest type is specified \(such as SHS\), IDOK otherwise.) 1788 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (14) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 16 16
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 168 376 (R_VerifyUpdate) 376 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 255 1150 (int R_VerifyUpdate\(context, partIn, partInLen\)) 1150 SB
161 297 1875 (R_SIGNATURE_CTX *context;                                     /* context */) 1875 SB
161 339 1875 (unsigned char *partIn;                                 /* next data part */) 1875 SB
161 381 1875 (unsigned int partInLen;                      /* length of next data part */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 465 168 (Updates ) 168 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
329 468 134 (context ) 134 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
463 465 1688 (using the appropriate digest algorithm \(as indicated by the context\) with the supplied data) 1688 SB
161 516 14 (\() 14 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
175 519 161 (partInLen) 161 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
336 516 222 ( bytes from ) 222 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
558 519 98 (partIn) 98 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
656 516 1501 (\).  Returns RE_DIGEST_ALGORITHM if an invalid digest type is specified \(such) 1501 SB
161 567 480 (as SHS\), IDOK otherwise.) 480 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 693 326 (R_VerifyFinal) 326 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 780 1550 (int R_VerifyFinal\(context, signature, signatureLen, publicKey\)) 1550 SB
161 822 1875 (R_SIGNATURE_CTX *context;                                     /* context */) 1875 SB
161 864 1875 (unsigned char *signature;                                   /* signature */) 1875 SB
161 906 1875 (unsigned int *signatureLen;                       /* length of signature */) 1875 SB
161 948 1875 (R_RSA_PRIVATE_KEY *privateKey;                /* signer's RSA public key */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1032 1928 (Verifies the supplied signature against the digest produced from the supplied context.  Returns zero for) 1928 SB
161 1083 1757 (success, RE_LEN if the supplied signature is too long \(greater than MAX_SIGNATURE_LEN\),) 1757 SB
161 1134 1990 (RE_PUBLIC_KEY if the supplied public key cannot decrypt the signature correctly, RE_SIGNATURE if the) 1990 SB
161 1185 1966 (message digests do not match or RE_DIGEST_ALGORITHM if an invalid digest type is specified \(such as) 1966 SB
161 1236 104 (SHS\).) 104 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1362 563 (R_VerifyBlockSignature) 563 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1449 1725 (int R_VerifyBlockSignature\( block, blockLen, signature, signatureLen,) 1725 SB
161 1491 1375 (                            digestAlgorithm, publicKey\)) 1375 SB
161 1533 1875 (unsigned char *block;                                           /* block */) 1875 SB
161 1575 1875 (unsigned int blockLen;                                /* length of block */) 1875 SB
161 1617 1875 (unsigned char *signature;                                   /* signature */) 1875 SB
161 1659 1875 (unsigned int signatureLen;                        /* length of signature */) 1875 SB
161 1701 1875 (int digestAlgorithm;                         /* message-digest algorithm */) 1875 SB
161 1743 1875 (R_RSA_PUBLIC_KEY *publicKey;                  /* signer's RSA public key */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1827 1299 (Verifies the signature of a memory-resident data block \(pointed to by ) 1299 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1460 1830 88 (block) 88 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1548 1827 22 (, ) 22 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1570 1830 162 (blockLen ) 162 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1732 1827 216 (bytes long\).) 216 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 1881 261 (digestAlgorithm) 261 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
422 1878 926 ( indicates the required message digest algorithm, ) 926 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1348 1881 163 (publicKey) 163 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1511 1878 582 ( is the sender's RSA public key,) 582 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 1932 156 (signature) 156 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
317 1929 691 ( points to the signature to verify and ) 691 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1008 1932 219 (signatureLen) 219 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1227 1929 843 ( indicates the length of the signature in bytes.) 843 SB
161 1980 1952 (RE_DIGEST_ALGORITHM if an invalid digest algorithm is selected. On success, returns zero.  On error,) 1952 SB
161 2031 1880 (returns RE_DIGEST_ALGORITHM if an invalid digest algorithm is selected, RE_LEN if the supplied) 1880 SB
161 2082 1974 (signature is too long \(greater than MAX_SIGNATURE_LEN\), RE_PUBLIC_KEY if the supplied public key) 1974 SB
161 2133 1780 (cannot decrypt the signature correctly or RE_SIGNATURE if the message digests do not match.) 1780 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (15) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 17 17
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 100 100 0 0 0 97 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 193 1250 (ENVELOPE PROCESSING) 1250 SB
255 255 255 fC
/fm 256 def
2020 15 155 316 B
1 F
n
0 0 0 fC
/fm 256 def
2020 8 155 332 B
1 F
n
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 516 386 (Introduction) 386 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 624 610 (RSAEURO uses the concept of a ) 610 SB
771 624 21 (\223) 21 SB
gs 1536 3318 792 0 CB
792 624 299 (digital envelope) 299 SB
gr
1091 624 21 (\224) 21 SB
gs 1216 3318 1112 0 CB
1112 624 982 ( for handling encrypted data.  Data is first encrypted) 982 SB
gr
161 675 1902 (using a secret-key algorithm, using a random session key.  The session key is then encrypted using the) 1902 SB
161 726 1854 (public keys of the intended recipients.  The encrypted versions of the session key and the secret-key) 1854 SB
161 777 870 (encrypted message form the digital envelope.  ) 870 SB
1031 777 21 (\223) 21 SB
gs 1276 3318 1052 0 CB
1052 777 161 (Opening) 161 SB
gr
1213 777 21 (\224) 21 SB
gs 1094 3318 1234 0 CB
1234 777 906 ( a digital envelope requires the decryption of the) 906 SB
gr
161 828 2006 (session key, using the recipient's private key \(assuming the recipient is one of the intended recipients!\), then) 2006 SB
161 879 843 (using the session key to decrypt the message.) 843 SB
161 980 1976 (RSAEURO provides four varieties of secret-key encryption, all based on the US Data Encryption Standard) 1976 SB
161 1031 120 (\(DES\):) 120 SB
gs 487 101 255 1132 CB
277 1132 268 (EA_DES_CBC) 268 SB
gr
gs 1235 101 743 1132 CB
766 1132 1146 (DES in cipher-block chaining \(CBC\) mode, using a single key.) 1146 SB
gr
gs 487 101 255 1233 CB
277 1233 296 (EA_DESX_CBC) 296 SB
gr
gs 1235 51 743 1233 CB
766 1233 190 (RSADSI's ) 190 SB
gr
956 1233 21 (\223) 21 SB
gs 1001 51 977 1233 CB
977 1233 178 (enhanced) 178 SB
gr
1155 1233 21 (\224) 21 SB
gs 802 51 1176 1233 CB
1176 1233 753 ( DES \(CBC with an additional XOR with) 753 SB
gr
gs 1235 101 743 1284 CB
766 1284 278 (a secret value\).) 278 SB
gr
gs 487 101 255 1385 CB
277 1385 395 (EA_DES_EDE3_CBC) 395 SB
gr
gs 1235 51 743 1385 CB
766 1385 974 (Triple-DES, using three keys, in CBC mode.  EDE is ) 974 SB
gr
1740 1385 21 (\223) 21 SB
gs 217 51 1761 1385 CB
1761 1385 162 (Encrypt-) 162 SB
gr
gs 1235 51 743 1436 CB
766 1436 313 (Decrypt-Encrypt) 313 SB
gr
1079 1436 21 (\224) 21 SB
gs 878 51 1100 1436 CB
1100 1436 676 (, where data is encrypted with key1,) 676 SB
gr
gs 1235 51 743 1487 CB
766 1487 1134 (decrypted with key2, then encrypted with key3.  EDE avoids) 1134 SB
gr
gs 1235 101 743 1538 CB
766 1538 414 (certain weaknesses of ) 414 SB
gr
1180 1538 21 (\223) 21 SB
gs 777 101 1201 1538 CB
1201 1538 94 (plain) 94 SB
gr
1295 1538 21 (\224) 21 SB
gs 662 101 1316 1538 CB
1316 1538 391 ( multiple encryption.) 391 SB
gr
gs 487 101 255 1639 CB
277 1639 395 (EA_DES_EDE2_CBC) 395 SB
gr
gs 1235 101 743 1639 CB
766 1639 1066 (Triple-DES using two keys \(key1 and key 3 are identical\).) 1066 SB
gr
161 1740 1963 (EA_DES_EDE3_CBC is the most secure, and the slowest, method of encryption supported by RSAEURO.) 1963 SB
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 1891 1003 (Sealing data in digital envelopes) 1003 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1999 349 (The procedure for ) 349 SB
510 1999 21 (\223) 21 SB
gs 1797 3318 531 0 CB
531 1999 130 (sealing) 130 SB
gr
661 1999 21 (\224) 21 SB
gs 1646 3318 682 0 CB
682 1999 732 ( data in a digital envelope is as follows:) 732 SB
gr
250 2100 21 (1) 21 SB
338 2100 767 (Initialise the envelope context, by calling ) 767 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1105 2103 174 (R_SealInit) 174 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1279 2100 33 (.  ) 33 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1312 2103 185 (R_SealInit ) 185 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1497 2100 549 (generates the random session) 549 SB
338 2151 1690 (key and returns the public-key encrypted versions of the session key \(the session key itself,) 1690 SB
338 2202 1673 (together with other intermediate data, is stored in the context\).  The secret-key encryption) 1673 SB
338 2253 828 (method to use is specified as a parameter to ) 828 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1166 2256 174 (R_SealInit) 174 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1340 2253 11 (.) 11 SB
250 2354 21 (2) 21 SB
338 2354 885 (Process the source data a block at a time, using ) 885 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1223 2357 245 (R_SealUpdate) 245 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1468 2354 11 (.) 11 SB
250 2455 21 (3) 21 SB
338 2455 21 (\223) 21 SB
gs 1969 3318 359 0 CB
359 2455 103 (Close) 103 SB
gr
462 2455 21 (\224) 21 SB
gs 1845 3318 483 0 CB
483 2455 372 ( the envelope using ) 372 SB
gr
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
gs 1845 3318 483 0 CB
855 2458 204 (R_SealFinal) 204 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 1845 3318 483 0 CB
1059 2455 632 (, and clear the encryption context.) 632 SB
gr
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 2606 816 (Opening digital envelopes) 816 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2714 349 (The procedure for ) 349 SB
510 2714 21 (\223) 21 SB
gs 1797 3318 531 0 CB
531 2714 151 (opening) 151 SB
gr
682 2714 21 (\224) 21 SB
gs 1625 3318 703 0 CB
703 2714 592 ( a digital envelope is as follows:) 592 SB
gr
250 2815 21 (1) 21 SB
338 2815 731 (Initialise a new envelope context using ) 731 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1069 2818 192 (R_OpenInit) 192 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1261 2815 747 (. This decrypts the session key using the) 747 SB
338 2866 1660 (recipient's private key, and sets up the context ready for decryption of the main message.) 1660 SB
250 2967 21 (2) 21 SB
338 2967 940 (Process the encrypted data a block at a time using ) 940 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1278 2970 263 (R_OpenUpdate) 263 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1541 2967 11 (.) 11 SB
250 3068 21 (3) 21 SB
338 3068 830 (Process the final encrypted data block using ) 830 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1168 3071 222 (R_OpenFinal) 222 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1390 3068 638 (, which also removes any padding) 638 SB
338 3119 93 (data.) 93 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (16) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 18 18
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 193 301 (Functions) 301 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 326 243 (R_SealInit) 243 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 413 1500 (int R_SealInit\(context, encryptedKeys, encryptedKeyLens, iv,) 1500 SB
161 455 1575 (               publicKeyCount, publicKeys, encryptionAlgorithm,) 1575 SB
161 497 675 (               randomStruct) 675 SB
161 539 1875 (R_ENVELOPE_CTX *context;                                  /* new context */) 1875 SB
161 581 1875 (unsigned char **encryptedKeys;                         /* encrypted keys */) 1875 SB
161 623 1875 (unsigned int *encryptedKeyLens;             /* lengths of encrypted keys */) 1875 SB
161 665 1875 (unsigned char iv[8];                            /* initialization vector */) 1875 SB
161 707 1875 (unsigned int publicKeyCount;                    /* number of public keys */) 1875 SB
161 749 1875 (R_RSA_PUBLIC_KEY **publicKeys;                            /* public keys */) 1875 SB
161 791 1875 (int encryptionAlgorithm;                    /* data encryption algorithm */) 1875 SB
161 833 1875 (R_RANDOM_STRUCT *randomStruct;                       /* random structure */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 917 776 (Initialises an envelope sealing operation.  ) 776 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
937 920 123 (context) 123 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1060 917 1096 ( points to an allocated blank R_ENVELOPE_CTX structure) 1096 SB
161 968 82 (and ) 82 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
243 971 229 (randomStruct) 229 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
472 968 958 ( points to a pre-initialised R_RANDOM_STRUCT.  ) 958 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1430 971 335 (encryptionAlgorithm) 335 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1765 968 302 ( indicates which) 302 SB
161 1019 1914 (method of secret encryption is required \(EA_DES_CBC, EA_DES_EDE2_CBC, EA_DES_EDE3_CBC or) 1914 SB
161 1070 321 (EA_DESX_CBC\).) 321 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 1174 174 (R_SealInit) 174 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
335 1171 172 ( uses the ) 172 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
507 1174 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
636 1171 1436 ( structure to generate a session key and initialisation vector for the secret-key) 1436 SB
161 1222 1275 (encryption \(DES in CBC mode requires a 64-bit initialisation vector\).) 1275 SB
161 1323 1108 (The public keys of the intended recipients are placed in the ) 1108 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1269 1326 182 (publicKeys) 182 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1451 1323 713 ( array, with the total number of public) 713 SB
161 1374 337 (keys indicated by ) 337 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
498 1377 264 (publicKeyCount) 264 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
762 1374 1403 ( \(at least one public key must be supplied\).  An invalid public key results in) 1403 SB
161 1425 1227 (an RE_PUBLIC_KEY error, and no further keys will be processed.) 1227 SB
161 1526 545 (On success, returns zero, the ) 545 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
706 1529 251 (encryptedKeys) 251 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
957 1526 1146 ( array contains the public-key encrypted session key \(for each) 1146 SB
161 1577 474 (supplied public key\) and ) 474 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
635 1580 314 (encryptedKeyLens) 314 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
949 1577 890 ( contains the respective encrypted key lengths.  ) 890 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1839 1580 27 (iv) 27 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1866 1577 235 ( contains the) 235 SB
161 1628 462 (DES initialisation vector.) 462 SB
161 1729 796 (On error, returns RE_NEED_RANDOM if ) 796 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
957 1732 229 (randomStruct) 229 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1186 1729 887 ( has not been initialised, RE_PUBLIC_KEY if an) 887 SB
161 1780 1833 (invalid public key has been supplied or RE_ENCRYPTION_ALGORITHM if an invalid encryption) 1833 SB
161 1831 526 (algorithm has been selected.) 526 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1957 327 (R_SealUpdate) 327 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2044 1650 (int R_SealUpdate \(context, partOut, partOutLen, partIn, partInLen\)) 1650 SB
161 2086 1875 (R_ENVELOPE_CTX *context;                                      /* context */) 1875 SB
161 2128 1875 (unsigned char *partOut;                      /* next encrypted data part */) 1875 SB
161 2170 1875 (unsigned int *partOutLen;          /* length of next encrypted data part */) 1875 SB
161 2212 1875 (unsigned char *partIn;                                 /* next data part */) 1875 SB
161 2254 1875 (unsigned int partInLen;                      /* length of next data part */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2338 1596 (Continues a sealing operation, encrypting a block of data using the supplied context.  ) 1596 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1757 2341 123 (context) 123 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1880 2338 73 ( is a) 73 SB
161 2389 1410 (R_ENVELOPE_CTX structure which has been successfully initialised using ) 1410 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1571 2392 174 (R_SealInit) 174 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1745 2389 33 (.  ) 33 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1778 2392 161 (partInLen) 161 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1939 2389 157 ( bytes of) 157 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 2443 98 (partIn) 98 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
259 2440 582 ( are encrypted and returned in ) 582 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
841 2443 128 (partOut) 128 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
969 2440 1050 (.  Due to data padding, some expansion may occur, and ) 1050 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
2019 2443 128 (partOut) 128 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2491 763 (should be at least eight bytes larger than ) 763 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
924 2494 98 (partIn) 98 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1022 2491 11 (.) 11 SB
161 2592 420 (Always returns IDOK.) 420 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (17) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 19 19
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 168 277 (R_SealFinal) 277 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 255 1125 (int R_SealFinal\(context, partOut, partOutLen\)) 1125 SB
161 297 1875 (R_ENVELOPE_CTX *context;                                      /* context */) 1875 SB
161 339 1875 (unsigned char *partOut;                      /* last encrypted data part */) 1875 SB
161 381 1875 (unsigned int *partOutLen;          /* length of last encrypted data part */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 465 1948 (Finalises a sealing operation, flushing the context buffer and resetting the context \(to allow further use of) 1948 SB
161 516 535 (the session key if required\).  ) 535 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
696 519 123 (context) 123 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
819 516 1225 ( is the R_ENVELOPE_CTX structure in use for the current sealing) 1225 SB
161 567 359 (operation. On exit, ) 359 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
520 570 128 (partOut) 128 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
648 567 177 ( contains ) 177 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
825 570 191 (partOutLen) 191 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1016 567 1116 ( bytes to be appended to the encrypted data \(the contents of) 1116 SB
161 618 376 (the context buffer\).  ) 376 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
537 621 191 (partOutLen) 191 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
728 618 953 ( will be no more than eight.  Always returns IDOK.) 953 SB
161 719 1969 (Note that although the context is restarted, sensitive information is not cleared.  If the context is no longer) 1969 SB
161 770 1142 (required, it is the caller's responsibility to clear it for security.) 1142 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 896 274 (R_OpenInit) 274 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 983 1975 (int R_OpenInit\(context, encryptionAlgorithm, encryptedKey, encryptedKeyLen, iv,) 1975 SB
161 1025 650 (               privateKey\)) 650 SB
161 1067 1875 (R_ENVELOPE_CTX *context;                                  /* new context */) 1875 SB
161 1109 1875 (int encryptionAlgorithm;                    /* data encryption algorithm */) 1875 SB
161 1151 1875 (unsigned char *encryptedKey;            /* encrypted data encryption key */) 1875 SB
161 1193 1875 (unsigned int encryptedKeyLen;                 /* length of encrypted key */) 1875 SB
161 1235 1875 (unsigned char iv[8];                            /* initialization vector */) 1875 SB
161 1277 1875 (R_RSA_PRIVATE_KEY *privateKey;            /* recipient's RSA private key */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1361 809 (Initialises an envelope context ready for an ) 809 SB
970 1361 21 (\223) 21 SB
gs 1337 3318 991 0 CB
991 1361 151 (opening) 151 SB
gr
1142 1361 21 (\224) 21 SB
gs 1165 3318 1163 0 CB
1163 1361 996 ( \(decryption\) operation.  The encrypted session key is) 996 SB
gr
161 1412 314 (decrypted using ) 314 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
475 1415 179 (privateKey) 179 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
654 1412 1475 (, and placed in the context.  The context is then initialised with the initialisation) 1475 SB
161 1463 564 (vector \(supplied unencrypted ) 564 SB
725 1463 21 (\223) 21 SB
gs 1582 3318 746 0 CB
746 1463 36 (in) 36 SB
gr
782 1463 21 (\224) 21 SB
gs 1525 3318 803 0 CB
803 1463 539 ( the envelope, and passed to ) 539 SB
gr
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
gs 1525 3318 803 0 CB
1342 1466 192 (R_OpenInit) 192 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 1525 3318 803 0 CB
1534 1463 61 ( as ) 61 SB
gr
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
gs 1525 3318 803 0 CB
1595 1466 27 (iv) 27 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 1525 3318 803 0 CB
1622 1463 433 (\), ready for decryption.) 433 SB
gr
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 1517 335 (encryptionAlgorithm) 335 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
496 1514 865 ( indicates the encryption algorithm to be used.) 865 SB
161 1615 1947 (On success, returns zero.  On error, returns RE_LEN if the encryptedkey is too long \(encryptedKeyLen >) 1947 SB
161 1666 1987 (MAX_ENCRYPTED_KEY_LEN\), RE_PRIVATE_KEY if the private key is invalid \(ie the correct session key) 1987 SB
161 1717 1932 (cannot be retrieved\) or RE_ENCRYPTION_ALGORITHM if an invalid encryption algorithm is selected.) 1932 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1843 358 (R_OpenUpdate) 358 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1930 1625 (int R_OpenUpdate\(context, partOut, partOutLen, partIn, partInLen\)) 1625 SB
161 1972 1875 (R_ENVELOPE_CTX *context;                                      /* context */) 1875 SB
161 2014 1875 (unsigned char *partOut;                      /* next recovered data part */) 1875 SB
161 2056 1875 (unsigned int *partOutLen;          /* length of next recovered data part */) 1875 SB
161 2098 1875 (unsigned char *partIn;                       /* next encrypted data part */) 1875 SB
161 2140 1875 (unsigned int partInLen;            /* length of next encrypted data part */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2224 1643 (Continues an opening operation, decrypting a block of data using the supplied context.  ) 1643 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1804 2227 123 (context) 123 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1927 2224 73 ( is a) 73 SB
161 2275 1410 (R_ENVELOPE_CTX structure which has been successfully initialised using ) 1410 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1571 2278 192 (R_OpenInit) 192 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1763 2275 33 (.  ) 33 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1796 2278 161 (partInLen) 161 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1957 2275 157 ( bytes of) 157 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 2329 98 (partIn) 98 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
259 2326 584 ( are decrypted and returned in ) 584 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
843 2329 128 (partOut) 128 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
971 2326 1050 (.  Due to data padding, some expansion may occur, and ) 1050 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
2021 2329 128 (partOut) 128 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2377 763 (should be at least eight bytes larger than ) 763 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
924 2380 98 (partIn) 98 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1022 2377 11 (.) 11 SB
161 2478 420 (Always returns IDOK.) 420 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (18) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 20 20
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 168 308 (R_OpenFinal) 308 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 255 1125 (int R_OpenFinal\(context, partOut, partOutLen\)) 1125 SB
161 297 1875 (R_ENVELOPE_CTX *context;                                      /* context */) 1875 SB
161 339 1875 (unsigned char *partOut;                      /* last recovered data part */) 1875 SB
161 381 1875 (unsigned int *partOutLen;          /* length of last recovered data part */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 465 1671 (Finalises an opening operation, flushing the context buffer and re-initialising the context.  ) 1671 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1832 468 123 (context) 123 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1955 465 110 ( is the) 110 SB
161 516 1326 (R_ENVELOPE_CTX structure in use for the current opening operation.) 1326 SB
161 617 547 (On success, returns zero and ) 547 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
708 620 128 (partOut) 128 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
836 617 177 ( contains ) 177 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1013 620 191 (partOutLen) 191 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1204 617 903 ( bytes to be appended to the decrypted data \(the) 903 SB
161 668 591 (contents of the context buffer\).  ) 591 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
752 671 191 (partOutLen) 191 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
943 668 1128 ( will be no more than eight.  On error, returns RE_KEY if the) 1128 SB
161 719 404 (session key is invalid.) 404 SB
161 820 1969 (Note that although the context is restarted, sensitive information is not cleared.  If the context is no longer) 1969 SB
161 871 1142 (required, it is the caller's responsibility to clear it for security.) 1142 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (19) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 21 21
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 100 100 0 0 0 97 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 193 869 (PEM FUNCTIONS) 869 SB
255 255 255 fC
/fm 256 def
2020 15 155 316 B
1 F
n
0 0 0 fC
/fm 256 def
2020 8 155 332 B
1 F
n
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 516 386 (Introduction) 386 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 624 1950 (RSAEURO provides a number functions to process data in Privacy Enhanced Mail \(PEM\) format, ASCII-) 1950 SB
161 675 1767 (encoded according to RFC 1421.  In addition to simple encoding and decoding functions, PEM ) 1767 SB
1928 675 21 (\223) 21 SB
gs 379 3318 1949 0 CB
1949 675 156 (versions) 156 SB
gr
2105 675 21 (\224) 21 SB
161 726 2004 (of several other functions are also provided.  The following list of PEM functions provides brief details, and) 2004 SB
161 777 1389 (the function descriptions which follow provide more detailed information.) 1389 SB
gs 569 101 166 878 CB
189 878 381 (R_EncodePEMBlock) 381 SB
gr
gs 1214 101 736 878 CB
759 878 898 (Encodes data into ASCII according to RFC 1421.) 898 SB
gr
gs 569 101 166 979 CB
189 979 384 (R_DecodePEMBlock) 384 SB
gr
gs 1214 101 736 979 CB
759 979 718 (Decodes data in RFC 1421 format into ) 718 SB
gr
1477 979 21 (\223) 21 SB
gs 452 101 1498 979 CB
1498 979 73 (raw) 73 SB
gr
1571 979 21 (\224) 21 SB
gs 358 101 1592 979 CB
1592 979 104 ( data.) 104 SB
gr
gs 569 101 166 1080 CB
189 1080 324 (R_SignPEMBlock) 324 SB
gr
gs 1214 51 736 1080 CB
759 1080 1065 (Produces an RFC 1421 encoded signature of a data block,) 1065 SB
gr
gs 1214 51 736 1131 CB
759 1131 1094 (optionally RFC 1421 encoding the data following signature) 1094 SB
gr
gs 1214 101 736 1182 CB
759 1182 209 (generation.) 209 SB
gr
gs 569 101 166 1283 CB
189 1283 434 (R_VerifyPEMSignature) 434 SB
gr
gs 1214 51 736 1283 CB
759 1283 1135 (Verifies an RFC 1421 encoded signature, optionally decoding) 1135 SB
gr
gs 1214 101 736 1334 CB
759 1334 765 (the content prior to signature generation.) 765 SB
gr
gs 569 101 166 1435 CB
189 1435 318 (R_SealPEMBlock) 318 SB
gr
gs 1214 51 736 1435 CB
759 1435 1050 (Signs and seals a block of data in and RFC 1421 encoded) 1050 SB
gr
759 1486 21 (\223) 21 SB
gs 1170 51 780 1486 CB
780 1486 168 (envelope) 168 SB
gr
948 1486 21 (\224) 21 SB
gs 981 51 969 1486 CB
969 1486 923 (, using single-key DES CBC. Only supports single) 923 SB
gr
gs 1214 101 736 1537 CB
759 1537 192 (recipients.) 192 SB
gr
gs 569 101 166 1638 CB
189 1638 345 (R_OpenPEMBlock) 345 SB
gr
759 1638 21 (\223) 21 SB
gs 1170 51 780 1638 CB
780 1638 120 (Opens) 120 SB
gr
900 1638 21 (\224) 21 SB
gs 1029 51 921 1638 CB
921 1638 423 ( an RFC 1421 encoded ) 423 SB
gr
1344 1638 21 (\223) 21 SB
gs 585 51 1365 1638 CB
1365 1638 168 (envelope) 168 SB
gr
1533 1638 21 (\224) 21 SB
gs 396 51 1554 1638 CB
1554 1638 260 (, verifying the) 260 SB
gr
gs 1214 101 736 1689 CB
759 1689 643 (signature and decrypting the data.) 643 SB
gr
gs 569 101 166 1790 CB
189 1790 493 (R_EncryptOpenPEMBlock) 493 SB
gr
gs 1214 51 736 1790 CB
759 1790 1155 (Encrypts a data block, returning encrypted RFC 1421 encoded) 1155 SB
gr
gs 1214 101 736 1841 CB
759 1841 93 (data.) 93 SB
gr
gs 569 101 166 1942 CB
189 1942 496 (R_DecryptOpenPEMBlock) 496 SB
gr
gs 1214 51 736 1942 CB
759 1942 1129 (Decrypts and decodes an encrypted, RFC 1421 encoded data) 1129 SB
gr
gs 1214 101 736 1993 CB
759 1993 111 (block.) 111 SB
gr
161 2094 775 (Throughout this section, any reference to ) 775 SB
936 2094 21 (\223) 21 SB
gs 1371 3318 957 0 CB
957 2094 282 (ASCII encoded) 282 SB
gr
1239 2094 21 (\224) 21 SB
gs 1068 3318 1260 0 CB
1260 2094 349 ( should be read as ) 349 SB
gr
1609 2094 21 (\223) 21 SB
gs 698 3318 1630 0 CB
1630 2094 525 (ASCII encoded according to) 525 SB
gr
161 2145 176 (RFC 1421) 176 SB
337 2145 21 (\224) 21 SB
gs 1970 3318 358 0 CB
358 2145 214 (, and so on.) 214 SB
gr
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 2296 301 (Functions) 301 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2429 472 (R_EncodePEMBlock) 472 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2516 1700 (int R_EncodePEMBlock\(encodedBlock, encodedBlockLen, block, blockLen\)) 1700 SB
161 2558 1875 (unsigned char *encodedBlock;                            /* encoded block */) 1875 SB
161 2600 1875 (unsigned int *encodedBlockLen;                /* length of encoded block */) 1875 SB
161 2642 1875 (unsigned char *block;                                           /* block */) 1875 SB
161 2684 1875 (unsigned int blockLen;                                /* length of block */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2768 1827 (Encodes a block of binary data into ASCII for transmission through 7-bit channels such as Internet) 1827 SB
161 2819 306 (electronic mail.  ) 306 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
467 2822 151 (blockLen) 151 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
618 2819 168 ( bytes of ) 168 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
786 2822 88 (block) 88 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
874 2819 552 ( are encoded and returned in ) 552 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1426 2822 237 (encodedBlock) 237 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1663 2819 198 (, of length ) 198 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1861 2822 237 (encodedBlock) 237 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
2098 2819 61 ( \(in) 61 SB
161 2870 123 (bytes\).) 123 SB
161 2971 1848 (Data expansion occurs as four ASCII characters are used to encode three data bytes.  Therefore, the) 1848 SB
161 3022 1324 (encodedBlock buffer should be allocated at least 33% larger than block.) 1324 SB
161 3123 420 (Always returns IDOK.) 420 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (20) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 22 22
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 168 477 (R_DecodePEMBlock) 477 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 255 1425 (int R_DecodePEMBlock \(outbuf, outlength, inbuf, inlength\)) 1425 SB
161 297 1875 (unsigned char *outbuf;                                          /* block */) 1875 SB
161 339 1875 (unsigned int *outlength;                              /* length of block */) 1875 SB
161 381 1875 (unsigned char *inbuf;                                   /* encoded block */) 1875 SB
161 423 1875 (unsigned int inlength;                        /* length of encoded block */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 507 1928 (Decodes a block of ASCII into binary data.  Inbuf holds the input data, inlength indicates the number of) 1928 SB
161 558 1367 (ASCII bytes to process, and therefore must be an integer multiple of four.) 1367 SB
161 659 1829 (On success, returns IDOK and outbuf contains outlength bytes of decoded data.  On error, returns) 1829 SB
161 710 1840 (RE_ENCODING in the event of an encoding error \(or if inlength is not an integer multiple of four\).) 1840 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 836 411 (R_SignPEMBlock) 411 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 923 1800 (int R_SignPEMBlock\( encodedContent, encodedContentLen, encodedSignature,) 1800 SB
161 965 1725 (                    encodedSignatureLen, content, contentLen, recode,) 1725 SB
161 1007 1200 (                    digestAlgorithm, privateKey\)) 1200 SB
161 1049 1875 (unsigned char *encodedContent;                        /* encoded content */) 1875 SB
161 1091 1875 (unsigned int *encodedContentLen;            /* length of encoded content */) 1875 SB
161 1133 1875 (unsigned char *encodedSignature;                    /* encoded signature */) 1875 SB
161 1175 1875 (unsigned int *encodedSignatureLen;        /* length of encoded signature */) 1875 SB
161 1217 1875 (unsigned char *content;                                       /* content */) 1875 SB
161 1259 1875 (unsigned int contentLen;                            /* length of content */) 1875 SB
161 1301 1875 (int recode;                                             /* recoding flag */) 1875 SB
161 1343 1875 (int digestAlgorithm;                                 /* digest algorithm */) 1875 SB
161 1385 1875 (R_RSA_PRIVATE_KEY *privateKey;               /* signer's RSA private key */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1469 1934 (Produces a digital signature of the supplied data, and returns a ASCII-encoded version of the signature.) 1934 SB
161 1520 771 (Optionally ASCII-encodes the data block.) 771 SB
161 1621 735 (Content contains the data to be signed, ) 735 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
896 1624 188 (contentLen) 188 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1084 1621 617 ( indicates the length of the data.  ) 617 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1701 1624 261 (digestAlgorithm) 261 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1962 1621 177 ( indicates) 177 SB
161 1672 688 (the message digest algorithm to use, ) 688 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
849 1675 179 (privateKey) 179 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1028 1672 1130 ( is the signer's RSA private key, used to encrypt the digest to) 1130 SB
161 1723 383 (produce a signature.) 383 SB
161 1824 39 (If ) 39 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
200 1827 116 (recode) 116 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
316 1824 474 ( is TRUE, the data block \() 474 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
790 1827 125 (content) 125 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
915 1824 1200 (\) is ASCII encoded following the message digest generation, and) 1200 SB
161 1875 593 (the encoded data is returned in ) 593 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
754 1878 278 (encodedContent) 278 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1032 1875 549 (, and its length is returned in ) 549 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1581 1878 341 (encodedContentLen) 341 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1922 1875 11 (.) 11 SB
161 1976 505 (On success, returns IDOK, ) 505 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
666 1979 307 (encodedSignature) 307 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
973 1976 806 ( contains the ASCII encoded signature and ) 806 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1779 1979 370 (encodedSignatureLen) 370 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2027 1948 (indicates the length of the encoded signature.  On error, returns RE_DIGEST_ALGORITHM if an invalid) 1948 SB
161 2078 1470 (digest algorithm is specified or RE_PRIVATE_KEY if the private key is invalid.) 1470 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2204 544 (R_VerifyPEMSignature) 544 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2291 1550 (int R_VerifyPEMSignature\( content, contentLen, encodedContent,) 1550 SB
161 2333 1550 (                          encodedContentLen, encodedSignature,) 1550 SB
161 2375 1775 (                          encodedSignatureLen, recode, digestAlgorithm,) 1775 SB
161 2417 900 (                          publicKey\)) 900 SB
161 2459 1875 (unsigned char *content;                                       /* content */) 1875 SB
161 2501 1875 (unsigned int *contentLen;                           /* length of content */) 1875 SB
161 2543 1875 (unsigned char *encodedContent;             /* \(possibly\) encoded content */) 1875 SB
161 2585 1875 (unsigned int encodedContentLen;             /* length of encoded content */) 1875 SB
161 2627 1875 (unsigned char *encodedSignature;                    /* encoded signature */) 1875 SB
161 2669 1875 (unsigned int encodedSignatureLen;         /* length of encoded signature */) 1875 SB
161 2711 1875 (int recode;                                             /* recoding flag */) 1875 SB
161 2753 1875 (int digestAlgorithm;                                 /* digest algorithm */) 1875 SB
161 2795 1875 (R_RSA_PUBLIC_KEY *publicKey;                      /* signer's public key */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2879 1915 (Decodes and verifies an ASCII-encoded signature.  Optionally decodes the data block prior to message) 1915 SB
161 2930 638 (digest generation and verification.) 638 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (21) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 23 23
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
0 0 0 fC
161 146 125 (content) 125 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
286 143 1172 ( contains the data against which the signature is to be verified, ) 1172 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1458 146 188 (contentLen) 188 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1646 143 491 ( indicates the length of the) 491 SB
161 194 154 (data.  If ) 154 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
315 197 116 (recode) 116 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
431 194 187 ( is TRUE, ) 187 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
618 197 278 (encodedContent) 278 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
896 194 25 ( \() 25 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
921 197 341 (encodedContentLen) 341 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1262 194 523 ( bytes long\) is decoded into ) 523 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1785 197 125 (content) 125 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1910 194 153 ( prior to) 153 SB
161 245 408 (signature verification.) 408 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 349 163 (publicKey) 163 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
324 346 1757 ( is used to decrypt the signature, and the resulting message digest is compared with the digest) 1757 SB
161 397 298 (generated from ) 298 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
459 400 125 (content) 125 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
584 397 753 ( using the digest algorithm indicated by ) 753 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1337 400 261 (digestAlgorithm) 261 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1598 397 564 ( \(it is the caller's responsibility) 564 SB
161 448 836 (to identify the appropriate digest algorithm\).) 836 SB
161 549 1902 (Returns zero for success \(the digests match\), RE_SIGNATURE_ENCODING if the signature cannot be) 1902 SB
161 600 1983 (decoded correctly, RE_CONTENT_ENCODING if the content cannot be decoded correctly, RE_LEN if the) 1983 SB
161 651 1788 (signature length is invalid, RE_DIGEST_ALGORITHM if an invalid digest algorithm is selected,) 1788 SB
161 702 1952 (RE_PUBLIC_KEY if the supplied public key is invalid or RE_SIGNATURE if the signature is incorrect \(ie) 1952 SB
161 753 483 (the digests do not match\).) 483 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 879 402 (R_SealPEMBlock) 402 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 966 1800 (int R_SealPEMBlock\( encryptedContent, encryptedContentLen, encryptedKey,) 1800 SB
161 1008 1400 (                    encryptedKeyLen, encryptedSignature,) 1400 SB
161 1050 1675 (                    encryptedSignatureLen, iv, content, contentLen,) 1675 SB
161 1092 1825 (                    digestAlgorithm, publicKey, privateKey, randomStruct\)) 1825 SB
161 1134 1875 (unsigned char *encryptedContent;           /* encoded, encrypted content */) 1875 SB
161 1176 1875 (unsigned int *encryptedContentLen;                             /* length */) 1875 SB
161 1218 1875 (unsigned char *encryptedKey;                   /* encoded, encrypted key */) 1875 SB
161 1260 1875 (unsigned int *encryptedKeyLen;                                 /* length */) 1875 SB
161 1302 1875 (unsigned char *encryptedSignature;       /* encoded, encrypted signature */) 1875 SB
161 1344 1875 (unsigned int *encryptedSignatureLen;                           /* length */) 1875 SB
161 1386 1875 (unsigned char iv[8];                        /* DES initialization vector */) 1875 SB
161 1428 1875 (unsigned char *content;                                       /* content */) 1875 SB
161 1470 1875 (unsigned int contentLen;                            /* length of content */) 1875 SB
161 1512 1875 (int digestAlgorithm;                        /* message-digest algorithms */) 1875 SB
161 1554 1875 (R_RSA_PUBLIC_KEY *publicKey;               /* recipient's RSA public key */) 1875 SB
161 1596 1875 (R_RSA_PRIVATE_KEY *privateKey;               /* signer's RSA private key */) 1875 SB
161 1638 1875 (R_RANDOM_STRUCT *randomStruct;                       /* random structure */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1722 1912 (Seals data in a digital envelope, with EA_DES_CBC encryption and digital signature, and returns PEM) 1912 SB
161 1773 389 (ASCII-encoded data.) 389 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 1877 125 (content) 125 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
286 1874 580 ( contains the data to be sealed, ) 580 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
866 1877 188 (contentLen) 188 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1054 1874 894 ( indicates the length of the data.  A signature of ) 894 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1948 1877 125 (content) 125 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
2073 1874 41 ( is) 41 SB
161 1925 934 (produced using the digest algorithm indicated by ) 934 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1095 1928 261 (digestAlgorithm) 261 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1356 1925 557 ( and the sender's private key, ) 557 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1913 1928 179 (privateKey) 179 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
2092 1925 11 (.) 11 SB
161 1976 19 (c) 19 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
180 1979 106 (ontent) 106 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
286 1976 1553 ( is then encrypted using EA_DES_CBC, with a random session key generated from ) 1553 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1839 1979 229 (randomStruct) 229 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
2068 1976 92 ( \(it is) 92 SB
161 2027 739 (the caller's responsibility to ensure that ) 739 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
900 2030 229 (randomStruct) 229 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1129 2027 391 ( has been initialised\).) 391 SB
161 2128 476 (On success, returns zero, ) 476 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
637 2131 300 (encryptedContent) 300 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
937 2128 177 ( contains ) 177 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1114 2131 363 (encryptedContentLen) 363 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1477 2128 649 ( bytes of ASCII encoded encrypted) 649 SB
161 2179 160 (content, ) 160 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
321 2182 232 (encryptedKey) 232 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
553 2179 1531 ( contains the ASCII encoded session key \(encryptedKeyLen bytes long\), encrypted) 1531 SB
161 2230 96 (with ) 96 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
257 2233 163 (publicKey) 163 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
420 2230 104 (, and ) 104 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
524 2233 329 (encryptedSignature) 329 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
853 2230 1255 ( contains the ASCII encoded signature.  All secret-key encryption is) 1255 SB
161 2281 974 (performed using EA_DES_CBC and the session key.) 974 SB
161 2382 1391 (It is the caller's responsibility to clear the context if it is no longer required.) 1391 SB
161 2483 1984 (On error, returns RE_DIGEST_ALGORITHM if an invalid digest algorithm is selected, RE_PRIVATE_KEY) 1984 SB
161 2534 1934 (if the private key is invalid, RE_PUBLIC_KEY if the public key is invalid or RE_NEED_RANDOM if the) 1934 SB
161 2585 646 (random structure is not initialised.) 646 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (22) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 24 24
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 168 433 (R_OpenPEMBlock) 433 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 255 1450 (int R_OpenPEMBlock\( content, contentLen, encryptedContent,) 1450 SB
161 297 1775 (                    encryptedContentLen, encryptedKey, encryptedKeyLen,) 1775 SB
161 339 1650 (                    encryptedSignature, encryptedSignatureLen, iv,) 1650 SB
161 381 1475 (                    digestAlgorithm, privateKey, publicKey\)) 1475 SB
161 423 1875 (unsigned char *content;                                       /* content */) 1875 SB
161 465 1875 (unsigned int *contentLen;                           /* length of content */) 1875 SB
161 507 1875 (unsigned char *encryptedContent;           /* encoded, encrypted content */) 1875 SB
161 549 1875 (unsigned int encryptedContentLen;                              /* length */) 1875 SB
161 591 1875 (unsigned char *encryptedKey;                   /* encoded, encrypted key */) 1875 SB
161 633 1875 (unsigned int encryptedKeyLen;                                  /* length */) 1875 SB
161 675 1875 (unsigned char *encryptedSignature;       /* encoded, encrypted signature */) 1875 SB
161 717 1875 (unsigned int encryptedSignatureLen;                            /* length */) 1875 SB
161 759 1875 (unsigned char iv[8];                        /* DES initialization vector */) 1875 SB
161 801 1875 (int digestAlgorithm;                        /* message-digest algorithms */) 1875 SB
161 843 1875 (R_RSA_PRIVATE_KEY *privateKey;            /* recipient's RSA private key */) 1875 SB
161 885 1875 (R_RSA_PUBLIC_KEY *publicKey;                  /* signer's RSA public key */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 969 21 (\223) 21 SB
gs 2146 3318 182 0 CB
182 969 120 (Opens) 120 SB
gr
302 969 21 (\224) 21 SB
gs 2005 3318 323 0 CB
323 969 1812 ( a ASCII encoded digital envelope, verifies the signature, decodes and decrypts the content of the) 1812 SB
gr
161 1020 179 (envelope.) 179 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 1124 300 (encryptedContent) 300 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
461 1121 867 ( contains the encoded, encrypted content, and ) 867 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1328 1124 300 (encryptedContent) 300 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1628 1121 527 ( indicates its length in bytes.) 527 SB
161 1172 626 (The session key is retrieved from ) 626 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
787 1175 232 (encryptedKey) 232 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1019 1172 25 ( \() 25 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1044 1175 295 (encryptedKeyLen) 295 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1339 1172 340 ( bytes long\) using ) 340 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1679 1175 163 (publicKey) 163 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1842 1172 252 (, then used to) 252 SB
161 1223 224 (decrypt the ) 224 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
385 1226 300 (encryptedContent) 300 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
685 1223 1471 (.  Once the content has been decrypted, the signature is retrieved, decoded and) 1471 SB
161 1274 1136 (verified against the content using the recipient's private key \() 1136 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1297 1277 179 (privateKey) 179 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1476 1274 651 (\) and the message digest algorithm) 651 SB
161 1325 242 (indicated by ) 242 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
403 1328 261 (digestAlgorithm) 261 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
664 1325 11 (.) 11 SB
161 1426 547 (On success, returns zero and ) 547 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
708 1429 125 (content) 125 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
833 1426 177 ( contains ) 177 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1010 1429 188 (contentLen) 188 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1198 1426 436 ( bytes of plaintext data.) 436 SB
161 1527 2003 (On error, returns RE_KEY_ENCODING if the key cannot be decoded, RE_SIGNATURE_ENCODING if the) 2003 SB
161 1578 2008 (signature cannot be decoded, RE_CONTENT_ENCODING if the content cannot be decoded, RE_LEN if the) 2008 SB
161 1629 1976 (encrypted session key is too long, RE_PRIVATE_KEY if the private key is invalid, RE_KEY if the retrieved) 1976 SB
161 1680 1696 (session key is invalid, RE_DIGEST_ALGORTIHM if an invalid digest algorithm is selected,) 1696 SB
161 1731 1847 (RE_PUBLIC_KEY if the public key is invalid or RE_SIGNATURE if the signature is incorrect \(ie the) 1847 SB
161 1782 582 (message digests do not match\).) 582 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1908 612 (R_EncryptOpenPEMBlock) 612 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1995 1750 (int R_EncryptOpenPEMBlock\(context, output, outputLen, input, inputLen\)) 1750 SB
161 2037 1875 (R_ENVELOPE_CTX *context;                                      /* context */) 1875 SB
161 2079 1875 (unsigned char *output;                       /* encrypted, encoded block */) 1875 SB
161 2121 1875 (unsigned int *outputLen;                             /* length of output */) 1875 SB
161 2163 1875 (unsigned char *input;                                /* block to encrypt */) 1875 SB
161 2205 1875 (unsigned int inputLen;                                         /* length */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2289 1455 (Encrypts a block of data and returns the ciphertext in ASCII encoded format.  ) 1455 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1616 2292 123 (context) 123 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1739 2289 257 ( is the current) 257 SB
161 2340 1394 (envelope context, which must have been initialised correctly by the caller.  ) 1394 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1555 2343 145 (inputLen) 145 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1700 2340 391 ( bytes from input are) 391 SB
161 2391 983 (encrypted and encoded into ASCII, then returned in ) 983 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1144 2394 106 (output) 106 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1250 2391 191 (.  On exit, ) 191 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1441 2394 169 (outputLen) 169 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1610 2391 558 ( may be up to 33% larger than) 558 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 2445 145 (inputLen) 145 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
306 2442 939 ( \(three source bytes become four output bytes\), so ) 939 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1245 2445 106 (output) 106 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1351 2442 803 ( should be allocated to account for the data) 803 SB
161 2493 663 (expansion.  Always returns ID_OK.) 663 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2619 617 (R_DecryptOpenPEMBlock) 617 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2706 1750 (int R_DecryptOpenPEMBlock\(context, output, outputLen, input, inputLen\)) 1750 SB
161 2748 1875 (R_ENVELOPE_CTX *context;                                      /* context */) 1875 SB
161 2790 1875 (unsigned char *output;                       /* decoded, decrypted block */) 1875 SB
161 2832 1875 (unsigned int *outputLen;                             /* length of output */) 1875 SB
161 2874 1875 (unsigned char *input;                        /* encrypted, encoded block */) 1875 SB
161 2916 1875 (unsigned int inputLen;                                         /* length */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 3000 1381 (Decrypts a block of ASCII encoded ciphertext and returns the plaintext in ) 1381 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1542 3003 106 (output) 106 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1648 3000 33 (.  ) 33 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1681 3003 134 (context ) 134 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1815 3000 246 (is the current) 246 SB
161 3051 1394 (envelope context, which must have been initialised correctly by the caller.  ) 1394 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1555 3054 145 (inputLen) 145 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1700 3051 222 ( bytes from ) 222 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1922 3054 82 (input) 82 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
2004 3051 69 ( are) 69 SB
161 3102 708 (decoded, decrypted, then returned in ) 708 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
869 3105 106 (output) 106 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
975 3102 474 (.  Always returns ID_OK.) 474 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (23) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 25 25
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 100 100 0 0 0 97 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 193 1823 (KEY GENERATION AND EXCHANGE) 1823 SB
255 255 255 fC
/fm 256 def
2020 15 155 316 B
1 F
n
0 0 0 fC
/fm 256 def
2020 8 155 332 B
1 F
n
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 516 386 (Introduction) 386 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 624 1955 (RSAEURO contains functions for the generation of RSA key pairs, and for the exchange of keys using the) 1955 SB
161 675 1648 (Diffie-Hellman agreement protocol.  This section describes these functions and their use.) 1648 SB
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 826 645 (RSA Key Generation) 645 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 934 341 (A single function, ) 341 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
502 937 373 (R_GeneratePEMKeys) 373 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
875 934 923 (, provides RSA key generation for RSAEURO.  A ) 923 SB
1798 934 21 (\223) 21 SB
gs 509 3318 1819 0 CB
1819 934 261 (prototype key) 261 SB
gr
2080 934 21 (\224) 21 SB
gs 227 3318 2101 0 CB
2101 934 41 ( is) 41 SB
gr
161 985 1945 (passed to the function, indicating the length of the modulus in bits and the public exponent.  Two values) 1945 SB
161 1036 811 (are supported for the public exponent: 3 or ) 811 SB
972 1036 21 (\223) 21 SB
gs 1335 3318 993 0 CB
993 1036 164 (Fermat 4) 164 SB
gr
1157 1036 21 (\224) 21 SB
gs 1150 3318 1178 0 CB
1178 1036 860 ( \(65537\).  A pre-initialised random structure is) 860 SB
gr
161 1087 523 (required for key generation.) 523 SB
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 1238 945 (Diffie-Hellman key agreement) 945 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1346 1971 (Diffie-Hellman key agreement provides a method for exchanging session keys without using RSA.  Diffie-) 1971 SB
161 1397 1851 (Hellman gains its security form the difficulty of calculating discrete logarithms in a finite field.  The) 1851 SB
161 1448 1373 (procedure for generating a session key using Diffie-Hellman is as follows:) 1373 SB
250 1549 21 (1) 21 SB
338 1549 971 (The Diffie-Hellman parameters are generated using ) 971 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1309 1552 392 (R_GenerateDHParams) 392 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1701 1549 349 (, and passed to the) 349 SB
338 1600 1631 (relevant parties \(this exchange can take place over an insecure communications path, as) 1631 SB
338 1651 1358 (knowledge of the Diffie-Hellman parameters does not assist an attacker\).) 1358 SB
250 1752 21 (2) 21 SB
338 1752 1622 (The two parties wishing to communicate each generate public and private values using) 1622 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
338 1806 387 (R_SetupDHAgreement) 387 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
725 1803 621 (, using the agreed on parameters.) 621 SB
250 1904 21 (3) 21 SB
338 1904 1337 (Both parties exchange public values, and compute the session key using) 1337 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
338 1958 443 (R_ComputeDHAgreedKey) 443 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
781 1955 11 (.) 11 SB
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 2106 301 (Functions) 301 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2239 496 (R_GeneratePEMKeys) 496 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2326 1700 (int R_GeneratePEMKeys\(publicKey, privateKey, protoKey, randomStruct\)) 1700 SB
161 2368 1875 (R_RSA_PUBLIC_KEY *publicKey;                       /* new RSA public key */) 1875 SB
161 2410 1875 (R_RSA_PRIVATE_KEY *privateKey;                    /* new RSA private key */) 1875 SB
161 2452 1875 (R_RSA_PROTO_KEY *protoKey;                          /* RSA prototype key */) 1875 SB
161 2494 1875 (R_RANDOM_STRUCT *randomStruct;                       /* random structure */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2578 1498 (Generates an RSA public/private key pair, based on the supplied prototype key.) 1498 SB
161 2679 1400 (On success, returns zero, with the new public and private keys returned in ) 1400 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1561 2682 163 (publicKey) 163 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1724 2679 93 ( and ) 93 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1817 2682 179 (privateKey) 179 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1996 2679 11 (.) 11 SB
161 2780 1948 (On error, returns RE_MODULUS_LEN if the modulus length specified in protoKey is invalid \(either less) 1948 SB
161 2831 1982 (than MIN_RSA_MODULUS_BITS or greater than MAX_RSA_MODULUS_BITS\), RE_NEED_RANDOM if) 1982 SB
161 2882 1733 (randomStruct has not been initialised or RE_DATA if a problem occurred generating primes.) 1733 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (24) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 26 26
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 168 520 (R_GenerateDHParams) 520 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 255 1725 (int R_GenerateDHParams\(params, primeBits, subPrimeBits, randomStruct\)) 1725 SB
161 297 1875 (R_DH_PARAMS *params;                    /* new Diffie-Hellman parameters */) 1875 SB
161 339 1875 (unsigned int primeBits;                       /* length of prime in bits */) 1875 SB
161 381 1875 (unsigned int subPrimeBits;                 /* length of subprime in bits */) 1875 SB
161 423 1875 (R_RANDOM_STRUCT *randomStruct;                       /* random structure */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 507 1476 (Generates a set of Diffie-Hellman parameters \(prime/modulus and generator\). ) 1476 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1637 510 158 (primeBits) 158 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1795 507 374 ( indicates the length) 374 SB
161 558 657 (of the prime required \(in bits\), and ) 657 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
818 561 223 (subPrimeBits) 223 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1041 558 587 ( indicates the length of a prime ) 587 SB
1628 558 21 (\223) 21 SB
gs 679 3318 1649 0 CB
1649 558 24 (q) 24 SB
gr
1673 558 21 (\224) 21 SB
gs 634 3318 1694 0 CB
1694 558 407 ( that divides p-1.  The) 407 SB
gr
161 609 467 (resulting Diffie-Hellman ) 467 SB
628 609 21 (\223) 21 SB
gs 1679 3318 649 0 CB
649 609 179 (generator) 179 SB
gr
828 609 21 (\224) 21 SB
gs 1479 3318 849 0 CB
849 609 366 ( will be of order q.  ) 366 SB
gr
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
gs 1479 3318 849 0 CB
1215 612 229 (randomStruct) 229 SB
gr
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 1479 3318 849 0 CB
1444 609 584 ( points to an initialised random) 584 SB
gr
161 660 180 (structure.) 180 SB
161 761 1028 (It is the caller's responsibility to use sensible values for ) 1028 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1189 764 158 (primeBits) 158 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1347 761 512 (; there are no sanity checks.) 512 SB
161 862 1336 (On success, returns zero, and the Diffie-Hellman parameters in params.) 1336 SB
161 963 1992 (On error, returns RE_NEED_RANDOM if randomStruct has not been initialised or RE_DATA if a problem) 1992 SB
161 1014 526 (occurred generating primes.) 526 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1140 533 (R_SetupDHAgreement) 533 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1227 1850 (int R_SetupDHAgreement\(publicValue, privateValue, privateValueLen, params,) 1850 SB
161 1269 900 (                       randomStruct\)) 900 SB
161 1311 1875 (unsigned char *publicValue;                          /* new public value */) 1875 SB
161 1353 1875 (unsigned char *privateValue;                        /* new private value */) 1875 SB
161 1395 1875 (unsigned int privateValueLen;                 /* length of private value */) 1875 SB
161 1437 1875 (R_DH_PARAMS *params;                        /* Diffie-Hellman parameters */) 1875 SB
161 1479 1875 (R_RANDOM_STRUCT *randomStruct;                       /* random structure */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1563 1981 (Generates a set of public and private Diffie-Hellman values, using the supplied prime and generator \(from) 1981 SB
161 1614 164 (params\).) 164 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 1718 127 (params) 127 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
288 1715 1009 ( is a previously initialised R_DH_PARAMS structure, ) 1009 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1297 1718 229 (randomStruct) 229 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1526 1715 584 ( points to an initialised random) 584 SB
161 1766 202 (structure.  ) 202 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
363 1769 273 (privateValueLen) 273 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
636 1766 1531 ( indicates the length of the required private value in bytes \(typically, the same size) 1531 SB
161 1817 712 (as the subPrimeBits value supplied to ) 712 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
873 1820 458 (R_GenerateDHParameters) 458 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1331 1817 25 (\).) 25 SB
161 1918 1492 (On success, returns IDOK, with the Diffie-Hellman private and public values in ) 1492 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1653 1921 210 (privateValue) 210 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1863 1918 93 ( and ) 93 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1956 1921 194 (publicValue) 194 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1969 249 (respectively \() 249 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
410 1972 194 (publicValue) 194 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
604 1969 406 ( is the same length as ) 406 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1010 1972 257 (params->prime) 257 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1267 1969 25 (\).) 25 SB
161 2070 1992 (On error, returns RE_NEED_RANDOM if randomStruct has not been initialised or RE_DATA if a problem) 1992 SB
161 2121 526 (occurred generating primes.) 526 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2247 616 (R_ComputeDHAgreedKey) 616 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2334 1675 (int R_ComputeDHAgreedKey\(agreedKey, otherPublicValue, privateValue,) 1675 SB
161 2376 1225 (                         privateValueLen, params\)) 1225 SB
161 2418 1875 (unsigned char *agreedKey;                              /* new agreed key */) 1875 SB
161 2460 1875 (unsigned char *otherPublicValue;                 /* other's public value */) 1875 SB
161 2502 1875 (unsigned char *privateValue;                            /* private value */) 1875 SB
161 2544 1875 (unsigned int privateValueLen;                 /* length of private value */) 1875 SB
161 2586 1875 (R_DH_PARAMS *params;                        /* Diffie-Hellman parameters */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2670 1244 (Computes a session key from supplied Diffie-Hellman parameters.) 1244 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 2774 127 (params) 127 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
288 2771 1009 ( is a previously initialised R_DH_PARAMS structure, ) 1009 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1297 2774 229 (randomStruct) 229 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1526 2771 436 ( points to an initialised ) 436 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1962 2774 129 (random) 129 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2822 202 (structure.  ) 202 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
363 2825 210 (privateValue) 210 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
573 2822 956 ( points to the caller's Diffie-Hellman private value \() 956 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1529 2825 273 (privateValueLen) 273 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1802 2822 227 ( bytes long\).) 227 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
161 2876 294 (OtherPublicValue) 294 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
455 2873 1308 ( points to the other party's Diffie-Hellman public value \(which will be ) 1308 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1763 2876 320 (params->primeLen) 320 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2924 107 (long\).) 107 SB
161 3025 1155 (On success, returns IDOK, with the generated session key in a) 1155 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1316 3028 162 (greedKey) 162 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1478 3025 25 ( \() 25 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
1503 3028 433 (params->primeLen bytes ) 433 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1936 3025 107 (long\).) 107 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (25) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 27 27
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
0 0 0 fC
161 143 1933 (On error, returns RE_DATA for a mathematical error \(such as incorrect public values or invalid params) 1933 SB
161 194 194 (structure\).) 194 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (26) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 28 28
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 100 100 0 0 0 97 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 193 1358 (MEMORY MANIPULATION) 1358 SB
255 255 255 fC
/fm 256 def
2020 15 155 316 B
1 F
n
0 0 0 fC
/fm 256 def
2020 8 155 332 B
1 F
n
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 516 386 (Introduction) 386 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 624 1352 (There are three memory manipulation functions used within RSAEURO:) 1352 SB
gs 348 101 235 725 CB
257 725 195 (R_memset) 195 SB
gr
gs 1114 101 584 725 CB
606 725 819 (Sets a range of memory to a specified value.) 819 SB
gr
gs 348 101 235 826 CB
257 826 210 (R_memcpy) 210 SB
gr
gs 1114 101 584 826 CB
606 826 857 (Copies a block of memory to another address.) 857 SB
gr
gs 348 101 235 927 CB
257 927 224 (R_memcmp) 224 SB
gr
gs 1114 101 584 927 CB
606 927 630 (Compares two blocks of memory.) 630 SB
gr
161 1028 456 (All of these routines are ) 456 SB
617 1028 21 (\223) 21 SB
gs 1690 3318 638 0 CB
638 1028 119 (secure) 119 SB
gr
757 1028 21 (\224) 21 SB
gs 1550 3318 778 0 CB
778 1028 1173 (, in that no intermediate storage is used during their operation.) 1173 SB
gr
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 1179 301 (Functions) 301 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1312 238 (R_memset) 238 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1399 825 (void R_memset\(output, value, len\)) 825 SB
161 1441 1875 (POINTER output;                                          /* output block */) 1875 SB
161 1483 1875 (int value;                                                      /* value */) 1875 SB
161 1525 1875 (unsigned int len;                                     /* length of block */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1609 85 (Sets ) 85 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
246 1612 50 (len) 50 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
296 1609 320 ( bytes starting at ) 320 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
616 1612 106 (output) 106 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
722 1609 59 ( to ) 59 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
781 1612 90 (value) 90 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
871 1609 11 (.) 11 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1735 255 (R_memcpy) 255 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1822 825 (void R_memcpy\(output, input, len\)) 825 SB
161 1864 1875 (POINTER output;                                          /* output block */) 1875 SB
161 1906 1875 (POINTER input;                                            /* input block */) 1875 SB
161 1948 1875 (unsigned int len;                                    /* length of blocks */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2032 139 (Copies ) 139 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
300 2035 50 (len) 50 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
350 2032 222 ( bytes from ) 222 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
572 2035 82 (input) 82 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
654 2032 59 ( to ) 59 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
713 2035 106 (output) 106 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
819 2032 11 (.) 11 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2158 271 (R_memcmp) 271 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2245 825 (int R_memcmp\(Block1, Block2, len\)) 825 SB
161 2287 1875 (POINTER Block1;                                           /* first block */) 1875 SB
161 2329 1875 (POINTER Block2;                                          /* second block */) 1875 SB
161 2371 1875 (unsigned int len;                                    /* length of blocks */) 1875 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2455 202 (Compares ) 202 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
363 2458 50 (len) 50 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
413 2455 320 ( bytes starting at ) 320 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
733 2458 113 (Block1) 113 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
846 2455 107 ( with ) 107 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
953 2458 113 (Block2) 113 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1066 2455 11 (.) 11 SB
161 2556 1958 (Returns zero if the blocks are identical.  If the blocks are different, returns the difference between the first) 1958 SB
161 2607 608 (two non-identical bytes \(returns ) 608 SB
32 0 0 38 38 0 0 0 36 /Helvetica /font12 ANSIFont font
769 2610 639 (Block1[difference] - Block2[difference]) 639 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1408 2607 762 (, where difference is the offset of the first) 762 SB
161 2658 347 (non-identical byte.) 347 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (27) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 29 29
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 100 100 0 0 0 97 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 193 1424 (TECHNICAL INFORMATION) 1424 SB
255 255 255 fC
/fm 256 def
2020 15 155 316 B
1 F
n
0 0 0 fC
/fm 256 def
2020 8 155 332 B
1 F
n
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 516 386 (Introduction) 386 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 624 1950 (This section contains miscellaneous technical information regarding RSEURO. The following subjects are) 1950 SB
161 675 160 (covered:) 160 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
250 776 188 (Error Type) 188 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
438 777 1294 (.  A complete list of RSAEURO error types and possible explanations.) 1294 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
250 878 408 (RSAEURO Data Types) 408 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
658 879 1187 (  A list and brief description of the major RSAEURO data types.) 1187 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
250 980 540 (Platform-specific configuration ) 540 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
790 981 1196 ( Platform-specific configuration information, including compiler) 1196 SB
338 1032 527 (settings and data structures.) 527 SB
32 0 0 42 42 0 0 0 40 /Palatino-Italic /font26 ANSIFont font
250 1133 176 (References) 176 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
426 1134 1152 (  Sources of further reading for related subjects and standards) 1152 SB
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 1285 360 (Error Types) 360 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
gs 727 101 254 1393 CB
276 1393 545 (RE_CONTENT_ENCODING) 545 SB
gr
gs 1068 51 982 1393 CB
1004 1393 852 (An ASCII encoding error occurred during the) 852 SB
gr
gs 1068 101 982 1444 CB
1004 1444 524 (decoding of a content block.) 524 SB
gr
gs 727 101 254 1545 CB
276 1545 200 (RE_DATA) 200 SB
gr
gs 1068 51 982 1545 CB
1004 1545 935 (An error occurred during one of the mathematical) 935 SB
gr
gs 1068 51 982 1596 CB
1004 1596 989 (routines. Usually caused by incorrect or invalid data,) 989 SB
gr
gs 1068 101 982 1647 CB
1004 1647 957 (such as an unmatched set of Diffie-Hellman values.) 957 SB
gr
gs 727 101 254 1748 CB
276 1748 516 (RE_DIGEST_ALGORITHM) 516 SB
gr
gs 1068 51 982 1748 CB
1004 1748 947 (An invalid digest algorithm was selected; either an) 947 SB
gr
gs 1068 51 982 1799 CB
1004 1799 935 (unsupported digest was selected \(ie not one of the) 935 SB
gr
gs 1068 51 982 1850 CB
1004 1850 875 (DA_xx values from RSAEURO.H\), or SHS was) 875 SB
gr
gs 1068 101 982 1901 CB
1004 1901 619 (selected for signature generation.) 619 SB
gr
gs 727 101 254 2002 CB
276 2002 313 (RE_ENCODING) 313 SB
gr
gs 1068 51 982 2002 CB
1004 2002 852 (An ASCII encoding error occurred during the) 852 SB
gr
gs 1068 101 982 2053 CB
1004 2053 468 (decoding of a data block.) 468 SB
gr
gs 727 101 254 2154 CB
276 2154 159 (RE_KEY) 159 SB
gr
gs 1068 51 982 2154 CB
1004 2154 848 (The recovered session key cannot decrypt the) 848 SB
gr
gs 1068 101 982 2205 CB
1004 2205 588 (associated content or signature.) 588 SB
gr
gs 727 101 254 2306 CB
276 2306 418 (RE_KEY_ENCODING) 418 SB
gr
gs 1068 51 982 2306 CB
1004 2306 852 (An ASCII encoding error occurred during the) 852 SB
gr
gs 1068 101 982 2357 CB
1004 2357 485 (decoding of a session key.) 485 SB
gr
gs 727 101 254 2458 CB
276 2458 162 (RE_LEN) 162 SB
gr
gs 1068 51 982 2458 CB
1004 2458 842 (An out-of-range signature or session key was) 842 SB
gr
gs 1068 101 982 2509 CB
1004 2509 243 (encountered.) 243 SB
gr
gs 727 101 254 2610 CB
276 2610 403 (RE_MODULUS_LEN) 403 SB
gr
gs 1068 51 982 2610 CB
1004 2610 992 (An invalid RSA modulus length was specified \(either) 992 SB
gr
gs 1068 101 982 2661 CB
1004 2661 407 (too long or too short\).) 407 SB
gr
gs 727 101 254 2762 CB
276 2762 418 (RE_NEED_RANDOM) 418 SB
gr
gs 1068 101 982 2762 CB
1004 2762 978 (An uninitialised random structure was encountered.) 978 SB
gr
gs 727 101 254 2863 CB
276 2863 362 (RE_PRIVATE_KEY) 362 SB
gr
gs 1068 101 982 2863 CB
1004 2863 703 (The supplied private key was invalid.) 703 SB
gr
gs 727 101 254 2964 CB
276 2964 334 (RE_PUBLIC_KEY) 334 SB
gr
gs 1068 101 982 2964 CB
1004 2964 686 (The supplied public key was invalid.) 686 SB
gr
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (28) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Palatino-Bold
%%+ font Palatino-Italic
%%+ font Palatino-Roman
%%Page: 30 30
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
0 0 0 fC
gs 727 101 254 143 CB
276 143 324 (RE_SIGNATURE) 324 SB
gr
gs 1068 51 982 143 CB
1004 143 916 (The signature does not match the associated data) 916 SB
gr
gs 1068 101 982 194 CB
1004 194 111 (block.) 111 SB
gr
gs 727 101 254 295 CB
276 295 583 (RE_SIGNATURE_ENCODING) 583 SB
gr
gs 1068 51 982 295 CB
1004 295 852 (An ASCII encoding error occurred during the) 852 SB
gr
gs 1068 101 982 346 CB
1004 346 449 (decoding of a signature.) 449 SB
gr
gs 727 101 254 447 CB
276 447 643 (RE_ENCRYPTION_ALGORITHM) 643 SB
gr
gs 1068 101 982 447 CB
1004 447 878 (An invalid encryption algorithm was specified.) 878 SB
gr
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 598 705 (RSAEURO Data Types) 705 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 731 545 (R_RANDOM_STRUCT) 545 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 818 400 (typedef struct {) 400 SB
161 860 1875 (  unsigned int bytesNeeded;                       /* seed bytes required */) 1875 SB
161 902 1875 (  unsigned char state[16];                            /* state of object */) 1875 SB
161 944 1875 (  unsigned int outputAvailable;                 /* number byte available */) 1875 SB
161 986 1875 (  unsigned char output[16];                              /* output bytes */) 1875 SB
161 1028 450 (} R_RANDOM_STRUCT;) 450 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1112 1854 (The R_RANDOM_STRUCT type stores the state and characteristics of a random number generator.) 1854 SB
338 1213 245 (bytesNeeded) 245 SB
752 1213 216 (Number of ) 216 SB
968 1213 21 (\223) 21 SB
gs 1339 3318 989 0 CB
989 1213 118 (mix in) 118 SB
gr
1107 1213 21 (\224) 21 SB
gs 1200 3318 1128 0 CB
1128 1213 913 ( bytes required to initialise the structure \(initially) 913 SB
gr
752 1264 1391 (defined by RANDOM_BYTES_RQ\). Must be zero before the structure may) 1391 SB
752 1315 154 (be used.) 154 SB
338 1416 87 (state) 87 SB
752 1416 878 (Internal state of the random number generator.) 878 SB
338 1517 304 (outputAvailable) 304 SB
752 1517 1387 (Indicates the number of unused bytes in the output array. When this value) 1387 SB
752 1568 843 (reaches zero, the output array is regenerated.) 843 SB
338 1669 126 (output) 126 SB
752 1669 770 (Output of the random number generator.) 770 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1795 509 (R_RSA_PUBLIC_KEY) 509 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1882 400 (typedef struct {) 400 SB
161 1924 1875 (  unsigned int bits;                        /* length in bits of modulus */) 1875 SB
161 1966 1875 (  unsigned char modulus[MAX_RSA_MODULUS_LEN];                 /* modulus */) 1875 SB
161 2008 1875 (  unsigned char exponent[MAX_RSA_MODULUS_LEN];        /* public exponent */) 1875 SB
161 2050 475 (} R_RSA_PUBLIC_KEY;) 475 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2134 1072 (The R_RSA_PUBLIC_KEY type stores an RSA public key.) 1072 SB
338 2235 67 (bits) 67 SB
752 2235 1360 (The length of the modulus in bits \(MIN_RSA_MODULUS_BITS < bits <=) 1360 SB
752 2286 580 (MAX_RSA_MODULUS_BITS\).) 580 SB
338 2387 166 (modulus) 166 SB
752 2387 1396 (The modulus, stored as a MAX_RSA_MODULUS_LEN byte number, most) 1396 SB
752 2438 844 (significant byte first, padded with zero bytes.) 844 SB
338 2539 172 (exponent) 172 SB
752 2539 1204 (The public exponent, stored in the same manner as the modulus.) 1204 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2665 548 (R_RSA_PRIVATE_KEY) 548 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2752 400 (typedef struct {) 400 SB
161 2794 1875 (  unsigned int bits;                        /* length in bits of modulus */) 1875 SB
161 2836 1875 (  unsigned char modulus[MAX_RSA_MODULUS_LEN];                 /* modulus */) 1875 SB
161 2878 1875 (  unsigned char publicExponent[MAX_RSA_MODULUS_LEN];  /* public exponent */) 1875 SB
161 2920 1875 (  unsigned char exponent[MAX_RSA_MODULUS_LEN];       /* private exponent */) 1875 SB
161 2962 1875 (  unsigned char prime[2][MAX_RSA_PRIME_LEN];            /* prime factors */) 1875 SB
161 3004 1875 (  unsigned char primeExponent[2][MAX_RSA_PRIME_LEN];/* exponents for CRT */) 1875 SB
161 3046 1875 (  unsigned char coefficient[MAX_RSA_PRIME_LEN];       /* CRT coefficient */) 1875 SB
161 3088 500 (} R_RSA_PRIVATE_KEY;) 500 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (29) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 31 31
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
0 0 0 fC
161 143 1117 (The R_RSA_PRIVATE_KEY type stores an RSA private key.) 1117 SB
338 244 67 (bits) 67 SB
752 244 1360 (The length of the modulus in bits \(MIN_RSA_MODULUS_BITS < bits <=) 1360 SB
752 295 580 (MAX_RSA_MODULUS_BITS\).) 580 SB
338 396 166 (modulus) 166 SB
752 396 1396 (The modulus, stored as a MAX_RSA_MODULUS_LEN byte number, most) 1396 SB
752 447 639 (significant byte first, zero padded.) 639 SB
338 548 294 (publicExponent) 294 SB
752 548 1204 (The public exponent, stored in the same manner as the modulus.) 1204 SB
338 649 172 (exponent) 172 SB
752 649 1221 (The private exponent, stored in the same manner as the modulus.) 1221 SB
338 750 111 (prime) 111 SB
752 750 1077 (The prime factors \(p and q\) of the modulus, stored as two) 1077 SB
752 801 1408 (MAX_RSA_PRIME_LEN long numbers in the same manner as the modulus) 1408 SB
752 852 135 (\(p > q\).) 135 SB
338 953 289 (primeExponent) 289 SB
752 953 1398 (The exponents for Chinese Remainder Theorem operations \(d mod p-1 and) 1398 SB
752 1004 907 (d mod q-1\), stored in the same manner as prime.) 907 SB
338 1105 191 (coefficient) 191 SB
752 1105 1351 (The coefficient \(1/q mod p\) for Chinese Remainder Theorem operations,) 1351 SB
752 1156 678 (stored in the same manner as prime.) 678 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1282 504 (R_RSA_PROTO_KEY) 504 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1369 400 (typedef struct {) 400 SB
161 1411 1800 (  unsigned int bits;                     /* length in bits of modulus */) 1800 SB
161 1453 1800 (  int useFermat4;                  /* public exponent \(1 = F4, 0 = 3\) */) 1800 SB
161 1495 450 (} R_RSA_PROTO_KEY;) 450 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1579 1490 (The R_RSA_PROTO_KEY type provides a template for RSA keypair generation.) 1490 SB
338 1680 67 (bits) 67 SB
752 1680 1293 (Length of the modulus in bits \(MIN_RSA_MODULUS_BITS < bits <=) 1293 SB
752 1731 580 (MAX_RSA_MODULUS_BITS\).) 580 SB
338 1832 216 (useFermat4) 216 SB
752 1832 686 (Public exponent, either Fermat4 or 3.) 686 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1958 396 (R_DH_PARAMS) 396 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 2045 400 (typedef struct {) 400 SB
161 2087 1875 (  unsigned char *prime;                                         /* prime */) 1875 SB
161 2129 1875 (  unsigned int primeLen;                              /* length of prime */) 1875 SB
161 2171 1875 (  unsigned char *generator;                                 /* generator */) 1875 SB
161 2213 1875 (  unsigned int generatorLen;                      /* length of generator */) 1875 SB
161 2255 350 (} R_DH_PARAMS;) 350 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2339 1638 (The R_DH_PARAMS type stores a set of parameters for a Diffie-Hellman key exchange.) 1638 SB
338 2440 111 (prime) 111 SB
752 2440 1395 (The prime p, stored as a primeLen-byte long number, most significant byte) 1395 SB
752 2491 344 (first, zero padded.) 344 SB
338 2592 181 (primeLen) 181 SB
752 2592 535 (The length in bytes of prime.) 535 SB
338 2693 179 (generator) 179 SB
752 2693 994 (The generator g, stored in the same manner as prime.) 994 SB
338 2794 249 (generatorLen) 249 SB
752 2794 603 (The length in bytes of generator.) 603 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (30) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 32 32
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 168 386 (R_DIGEST_CTX) 386 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 255 400 (typedef struct {) 400 SB
161 297 1875 (  int digestAlgorithm;                                    /* digest type */) 1875 SB
161 339 1875 (  union {                                          /* digest sub-context */) 1875 SB
161 381 425 (     MD2_CTX md2;) 425 SB
161 423 425 (     MD4_CTX md4;) 425 SB
161 465 425 (     MD5_CTX md5;) 425 SB
161 507 425 (     SHS_CTX shs;) 425 SB
161 549 300 (  } context;) 300 SB
161 591 375 (} R_DIGEST_CTX;) 375 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 675 1427 (The R_DIGEST_CTX type stores the context for a message digest generation.) 1427 SB
338 776 308 (digestAlgorithm) 308 SB
752 776 1257 (The message digest algorithm for the context \(DA_MD2, DA_MD4,) 1257 SB
752 827 434 (DA_MD5 or DA_SHS\).) 434 SB
338 928 136 (context) 136 SB
752 928 1390 (The algorithm-specific context. Consult the message digest source code for) 1390 SB
752 979 208 (full details.) 208 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1105 500 (R_SIGNATURE_CTX) 500 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1192 400 (typedef struct {) 400 SB
161 1234 800 (     R_DIGEST_CTX digestContext;) 800 SB
161 1276 450 (} R_SIGNATURE_CTX;) 450 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1360 2008 (The R_SIGNATURE_CTX type stores the context for a signature generation. Currently, R_SIGNATUR_CTX) 2008 SB
161 1411 1673 (is the same as R_DIGEST_CTX, although it has been separately typed for future revisions.) 1673 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1537 466 (R_ENVELOPE_CTX) 466 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
161 1624 400 (typedef struct {) 400 SB
161 1666 1875 (  int encryptionAlgorithm;                            /* encryption type */) 1875 SB
161 1708 1875 (  union {                                      /* encryption sub-context */) 1875 SB
161 1750 525 (     DES_CBC_CTX des;) 525 SB
161 1792 575 (     DES3_CBC_CTX des3;) 575 SB
161 1834 575 (     DESX_CBC_CTX desx;) 575 SB
161 1876 450 (  } cipherContext;) 450 SB
161 1918 1875 (  unsigned char buffer[8];                                /* data buffer */) 1875 SB
161 1960 1875 (  unsigned int bufferLen;                               /* buffer length */) 1875 SB
161 2002 425 (} R_ENVELOPE_CTX;) 425 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2086 1000 (The R_ENVELOPE_CTX type stores the context for a ) 1000 SB
1161 2086 21 (\223) 21 SB
gs 1146 3318 1182 0 CB
1182 2086 130 (sealing) 130 SB
gr
1312 2086 21 (\224) 21 SB
gs 995 3318 1333 0 CB
1333 2086 441 ( \(encryption\) operation.) 441 SB
gr
338 2187 396 (encryptionAlgorithm) 396 SB
752 2187 1061 (The encryption algorithm for the context \(EA_DES_CBC,) 1061 SB
752 2238 1195 (EA_DES_EDE2_CBC, EA_DES_EDE3_CBC or EA_DESX_CBC\).) 1195 SB
338 2339 264 (cipherContext) 264 SB
752 2339 1343 (The cipher-specific context. Consult the DES source code for full details.) 1343 SB
338 2440 113 (buffer) 113 SB
752 2440 1402 (The input buffer for the sealing operation \(DES encrypts in 64-bit blocks, so) 1402 SB
752 2491 988 (incoming data is buffered until 8 bytes are available\).) 988 SB
338 2592 183 (bufferLen) 183 SB
752 2592 635 (The number of bytes in the buffer.) 635 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (31) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 33 33
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
0 0 0 fC
161 193 976 (Platform-specific Configuration) 976 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 326 139 (Types) 139 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 413 1915 (There are three platform-specific types used in RSAEURO, defined in GLOBAL.H and described in the) 1915 SB
161 464 412 (following paragraphs.) 412 SB
338 565 187 (POINTER) 187 SB
752 565 1411 (A generic pointer to memory. It should be possible to cast any other pointer) 1411 SB
752 616 246 (to POINTER.) 246 SB
338 717 106 (BYTE) 106 SB
752 717 254 (An 8-bit byte.) 254 SB
338 818 129 (UINT2) 129 SB
752 818 484 (A 16-bit unsigned integer.) 484 SB
338 919 129 (UINT4) 129 SB
752 919 484 (A 32-bit unsigned integer.) 484 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1045 363 (Defined macros) 363 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1132 732 (RSAEURO uses three #defined macros:) 732 SB
338 1233 272 (PROTOTYPES) 272 SB
752 1233 1409 (The PROTOTYPES macro indicates the form of C function declarations. If it) 1409 SB
752 1284 704 (is non-zero, functions are declared as:) 704 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
752 1386 825 (type function \(type, ...., type\);) 825 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
752 1529 567 (Otherwise, they take the form:) 567 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
752 1631 425 (type function \(\);) 425 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 1774 176 (USEASM) 176 SB
752 1774 1347 (If USEASM is defined then assembler routines are used where available.) 1347 SB
752 1825 1220 (Assembler versions of the key performance bottlenecks are under) 1220 SB
752 1876 1392 (development. Please check the source list to see which functions have been) 1392 SB
752 1927 502 (implemented in assembler.) 502 SB
338 2028 206 (USE_ANSI) 206 SB
752 2028 1266 (If USE_ANSI is defined, the ANSI-standard memcpy, memcmp and) 1266 SB
752 2079 1256 (memset routines are used in place of the RSAEURO stdlib routines.) 1256 SB
32 0 0 67 67 0 0 0 65 /Palatino-Bold /font24 ANSIFont font
161 2230 337 (References) 337 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2363 184 (General) 184 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2450 1625 (For general information about cryptography and its applications, consult the following:) 1625 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 2551 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 2559 314 (Bruce Schneier's ) 314 SB
652 2559 21 (\223) 21 SB
gs 1655 3318 673 0 CB
673 2559 429 (Applied Cryptography) 429 SB
gr
gs 1655 3318 673 0 CB
1102 2559 11 ( ) 11 SB
gr
1113 2559 21 (\226) 21 SB
gs 1194 3318 1134 0 CB
1134 2559 848 ( Protocols, Algorithms, and Source Code in C) 848 SB
gr
1982 2559 21 (\224) 21 SB
338 2610 512 (\(John Wiley & Sons, ISBN 0) 512 SB
850 2610 77 (-471) 77 SB
927 2610 119 (-59756) 119 SB
1046 2610 972 (-2\) is an excellent introduction to cryptography both) 972 SB
338 2661 460 (from the theoretical and ) 460 SB
798 2661 21 (\223) 21 SB
gs 1509 3318 819 0 CB
819 2661 194 (real world) 194 SB
gr
1013 2661 21 (\224) 21 SB
gs 1294 3318 1034 0 CB
1034 2661 877 ( perspective.  It contains full coverage of all the) 877 SB
gr
338 2712 1636 (commonly-used algorithms, and a detailed examination of the accompanying protocols.) 1636 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 2813 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 2821 1654 (The frequently-asked questions \(FAQ\) file for the Usenet newsgroup sci.crypt provides a) 1654 SB
338 2872 1680 (good basic coverage of the issues involved in cryptography, and is available free of charge) 1680 SB
338 2923 1261 (over the Internet \(available on the Internet via anonymous ftp from ) 1261 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
1599 2929 300 (rtfm.mit.edu) 300 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1899 2923 47 ( in) 47 SB
338 2974 907 (/pub/usenet/news.answers/cryptography-faq\).) 907 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (32) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 34 34
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
0 0 0 fC
291 143 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 151 1282 (RSADSI provide a good introduction to cryptography in the form of ) 1282 SB
1620 151 21 (\223) 21 SB
gs 687 3318 1641 0 CB
1641 151 333 (Frequently Asked) 333 SB
gr
338 202 749 (Questions About Today's Cryptography) 749 SB
1087 202 21 (\224) 21 SB
gs 1220 3318 1108 0 CB
1108 202 741 (, a document available free of charge by) 741 SB
gr
338 253 416 (anonymous FTP from ) 416 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
754 259 275 (ftp.rsa.com) 275 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1029 253 830 (.  RSADSI also publish a range of Public-Key) 830 SB
338 304 1679 (Cryptography Standards \(PKCS\) which are used by a number of major companies and are) 1679 SB
338 355 1670 (broadly compliant with the relevant OSI standards.  Details of the PKCS standards can be) 1670 SB
338 406 383 (obtained by mailing ) 383 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
721 412 300 (pkcs@rsa.com) 300 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1021 406 525 ( or via anonymous ftp from ) 525 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
1546 412 175 (rsa.com) 175 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1721 406 11 (.) 11 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 507 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 515 1670 (The author of RSAEURO maintains a good cryptography-based World Wide Web page at) 1670 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
338 572 725 (http://www.phantom.com/~skapp) 725 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
1063 566 742 (.  The page contains links to many other) 742 SB
338 617 495 (cryptography and security) 495 SB
833 617 21 (\226) 21 SB
gs 1474 3318 854 0 CB
854 617 234 (related sites.) 234 SB
gr
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 743 106 (RSA) 106 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 830 1170 (For further details of the RSA algorithm, consult the following:) 1170 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 931 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 939 723 (R. Rivest, A. Shamir, and L. Adleman, ) 723 SB
1061 939 21 (\223) 21 SB
gs 1246 3318 1082 0 CB
1082 939 880 (A Method for Obtaining Digital Signatures and) 880 SB
gr
338 990 494 (Public-Key Cryptosystems) 494 SB
832 990 21 (\224) 21 SB
gs 1475 3318 853 0 CB
853 990 1143 (, Communications of the ACM, v. 21, n. 2, 2 Feb 1978, pp. 120) 1143 SB
gr
1996 990 21 (\226) 21 SB
338 1041 74 (126.) 74 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 1142 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 1150 723 (R. Rivest, A. Shamir, and L. Adleman, ) 723 SB
1061 1150 21 (\223) 21 SB
gs 1246 3318 1082 0 CB
1082 1150 698 (On Digital Signatures and Public-Key) 698 SB
gr
338 1201 280 (Cryptosystems) 280 SB
618 1201 21 (\224) 21 SB
gs 1689 3318 639 0 CB
639 1201 1370 (, MIT Laboratory for Computer Science, Technical Report, MIT/LCS/TR-) 1370 SB
gr
338 1252 239 (212, Jan 1979) 239 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 1353 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 1361 723 (R. Rivest, A. Shamir, and L. Adleman, ) 723 SB
1061 1361 21 (\223) 21 SB
gs 1246 3318 1082 0 CB
1082 1361 830 (Cryptographic Communications System and) 830 SB
gr
338 1412 147 (Method) 147 SB
485 1412 21 (\224) 21 SB
gs 1822 3318 506 0 CB
506 1412 574 (, US Patent 4,405,829, 20/9/83.) 574 SB
gr
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 1538 357 (Diffie-Hellman) 357 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 1625 1628 (For further details of the Diffie-Hellman key exchange algorithm, consult the following:) 1628 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 1726 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 1734 1562 (W. Diffie and M.E. Hellman. New directions in cryptography. IEEE Transactions on) 1562 SB
338 1785 753 (Information Theory, IT-22:644-654, 1976.) 753 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 1886 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 1894 1542 (RSA Laboratories. PKCS #3: Diffie-Hellman Key-Agreement Standard. Version 1.4,) 1542 SB
338 1945 305 (November 1993.) 305 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2071 426 (Digest Algorithms) 426 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2158 1579 (For further details of the digest algorithms used in RSAEURO, consult the following:) 1579 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 2259 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 2267 1309 (B. Kaliski. RFC 1319: The MD2 Message-Digest Algorithm. April 1992.) 1309 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 2368 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 2376 1299 (R. Rivest. RFC 1320: The MD4 Message-Digest Algorithm. April 1992.) 1299 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 2477 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 2485 1299 (R. Rivest. RFC 1321: The MD5 Message-Digest Algorithm. April 1992.) 1299 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 2586 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 2594 383 (NIST FIPS PUB 180, ) 383 SB
721 2594 21 (\223) 21 SB
gs 1586 3318 742 0 CB
742 2594 414 (Secure Hash Standard) 414 SB
gr
1156 2594 21 (\224) 21 SB
gs 1151 3318 1177 0 CB
1177 2594 680 (, National Institute of Standards and) 680 SB
gr
338 2645 1139 (Technology, US Department of commerce, April 1993 [draft].) 1139 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 2771 104 (DES) 104 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 2858 1382 (For further details of the Data Encryption Standard, consult the following:) 1382 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 2959 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 2967 1648 (National Bureau of Standards. FIPS Publication 46-1: Data Encryption Standard. January) 1648 SB
338 3018 95 (1988.) 95 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (33) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Page: 35 35
%%PageResources: (atend)
SS
0 0 25 31 776 1169 300 SM
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
0 0 0 fC
291 143 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 151 1635 (National Bureau of Standards. FIPS Publication 81: DES Modes of Operation. December) 1635 SB
338 202 95 (1980.) 95 SB
32 0 0 50 50 0 0 0 48 /Palatino-Bold /font24 ANSIFont font
161 328 546 (Privacy-enhcanced mail) 546 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
161 415 1782 (For further details of Internet privacy-enhanced mail and its applications, consult the following:) 1782 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 516 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 524 1569 (J. Linn. RFC 1421: Privacy Enhancement for Internet Electronic Mail: Part I: Message) 1569 SB
338 575 1097 (Encryption and Authentication Procedures. February 1993.) 1097 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 676 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 684 1640 (S. Kent. RFC 1422: Privacy Enhancement for Internet Electronic Mail: Part II: Certificate-) 1640 SB
338 735 747 (Based Key Management. February 1993.) 747 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 836 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 844 1527 (D. Balenson. RFC 1423: Privacy Enhancement for Internet Electronic Mail: Part III:) 1527 SB
338 895 954 (Algorithms, Modes, and Identifiers. February 1993.) 954 SB
32 0 0 50 50 0 0 0 47 /Helvetica /font12 ANSIFont font
291 996 18 (\236) 18 SB
32 0 0 42 42 0 0 0 39 /Palatino-Roman /font27 ANSIFont font
338 1004 1566 (B. Kaliski. RFC 1424: Privacy Enhancement for Internet Electronic Mail: Part IV: Key) 1566 SB
338 1055 926 (Certification and Related Services. February 1993.) 926 SB
32 0 0 42 42 0 0 0 41 /Palatino-Bold /font24 ANSIFont font
161 3214 523 (RSAEURO Documentation) 523 SB
1085 3214 42 (34) 42 SB
1707 3214 344 (Deta Draft 12/5/95) 344 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-Roman
%%Trailer
SVDoc restore
end
%%Pages: 35
% TrueType font name key:
%    MSTT31c157 = 1b87DTimes New RomanF0000002a000001900000
%    MSTT31c164 = 0977DTimes New RomanF0000002a000001900000
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font Courier
%%+ font Helvetica
%%+ font Palatino-Bold
%%+ font Palatino-BoldItalic
%%+ font Palatino-Italic
%%+ font Palatino-Roman

%%EOF
